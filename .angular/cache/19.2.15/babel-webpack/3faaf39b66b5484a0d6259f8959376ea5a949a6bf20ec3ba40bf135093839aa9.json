{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class JobDescriptionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.backendUrl}/jobdescriptions`;\n  }\n  getJobDescriptions(filters) {\n    let params = new HttpParams();\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params = params.set(key, filters[key]);\n        }\n      });\n    }\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  getJobDescriptionById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createJobDescription(jobDescription) {\n    return this.http.post(this.apiUrl, jobDescription);\n  }\n  updateJobDescription(id, jobDescription) {\n    return this.http.put(`${this.apiUrl}/${id}`, jobDescription);\n  }\n  deleteJobDescription(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  searchJobDescriptions(query) {\n    const params = new HttpParams().set('search', query);\n    return this.http.get(`${this.apiUrl}/search`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function JobDescriptionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || JobDescriptionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JobDescriptionService,\n      factory: JobDescriptionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","environment","JobDescriptionService","constructor","http","apiUrl","backendUrl","getJobDescriptions","filters","params","Object","keys","forEach","key","set","get","getJobDescriptionById","id","createJobDescription","jobDescription","post","updateJobDescription","put","deleteJobDescription","delete","searchJobDescriptions","query","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\services\\job-description.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { JobDescription } from '../models/job-description.model';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobDescriptionService {\n  private apiUrl = `${environment.backendUrl}/jobdescriptions`;\n\n  constructor(private http: HttpClient) { }\n\n  getJobDescriptions(filters?: any): Observable<JobDescription[]> {\n    let params = new HttpParams();\n    if (filters) {\n      Object.keys(filters).forEach(key => {\n        if (filters[key]) {\n          params = params.set(key, filters[key]);\n        }\n      });\n    }\n    return this.http.get<JobDescription[]>(this.apiUrl, { params });\n  }\n\n  getJobDescriptionById(id: number): Observable<JobDescription> {\n    return this.http.get<JobDescription>(`${this.apiUrl}/${id}`);\n  }\n\n  createJobDescription(jobDescription: Partial<JobDescription>): Observable<JobDescription> {\n    return this.http.post<JobDescription>(this.apiUrl, jobDescription);\n  }\n\n  updateJobDescription(id: number, jobDescription: Partial<JobDescription>): Observable<JobDescription> {\n    return this.http.put<JobDescription>(`${this.apiUrl}/${id}`, jobDescription);\n  }\n\n  deleteJobDescription(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  searchJobDescriptions(query: string): Observable<JobDescription[]> {\n    const params = new HttpParams().set('search', query);\n    return this.http.get<JobDescription[]>(`${this.apiUrl}/search`, { params });\n  }\n}"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAG7D,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACK,UAAU,kBAAkB;EAEpB;EAExCC,kBAAkBA,CAACC,OAAa;IAC9B,IAAIC,MAAM,GAAG,IAAIT,UAAU,EAAE;IAC7B,IAAIQ,OAAO,EAAE;MACXE,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,OAAO,CAACC,GAAG,IAAG;QACjC,IAAIL,OAAO,CAACK,GAAG,CAAC,EAAE;UAChBJ,MAAM,GAAGA,MAAM,CAACK,GAAG,CAACD,GAAG,EAAEL,OAAO,CAACK,GAAG,CAAC,CAAC;QACxC;MACF,CAAC,CAAC;IACJ;IACA,OAAO,IAAI,CAACT,IAAI,CAACW,GAAG,CAAmB,IAAI,CAACV,MAAM,EAAE;MAAEI;IAAM,CAAE,CAAC;EACjE;EAEAO,qBAAqBA,CAACC,EAAU;IAC9B,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAiB,GAAG,IAAI,CAACV,MAAM,IAAIY,EAAE,EAAE,CAAC;EAC9D;EAEAC,oBAAoBA,CAACC,cAAuC;IAC1D,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAiB,IAAI,CAACf,MAAM,EAAEc,cAAc,CAAC;EACpE;EAEAE,oBAAoBA,CAACJ,EAAU,EAAEE,cAAuC;IACtE,OAAO,IAAI,CAACf,IAAI,CAACkB,GAAG,CAAiB,GAAG,IAAI,CAACjB,MAAM,IAAIY,EAAE,EAAE,EAAEE,cAAc,CAAC;EAC9E;EAEAI,oBAAoBA,CAACN,EAAU;IAC7B,OAAO,IAAI,CAACb,IAAI,CAACoB,MAAM,CAAO,GAAG,IAAI,CAACnB,MAAM,IAAIY,EAAE,EAAE,CAAC;EACvD;EAEAQ,qBAAqBA,CAACC,KAAa;IACjC,MAAMjB,MAAM,GAAG,IAAIT,UAAU,EAAE,CAACc,GAAG,CAAC,QAAQ,EAAEY,KAAK,CAAC;IACpD,OAAO,IAAI,CAACtB,IAAI,CAACW,GAAG,CAAmB,GAAG,IAAI,CAACV,MAAM,SAAS,EAAE;MAAEI;IAAM,CAAE,CAAC;EAC7E;;;uCApCWP,qBAAqB,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAArB5B,qBAAqB;MAAA6B,OAAA,EAArB7B,qBAAqB,CAAA8B,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}