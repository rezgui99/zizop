{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet EmployeeSkillsComponent = class EmployeeSkillsComponent {\n  constructor(fb, employeeService, skillService, employeeSkillService) {\n    this.fb = fb;\n    this.employeeService = employeeService;\n    this.skillService = skillService;\n    this.employeeSkillService = employeeSkillService;\n    this.employees = [];\n    this.skillsList = [];\n    this.skillLevels = [];\n    this.skills = []; // EmployeeSkill[]\n    this.loading = false;\n    this.loadingSkills = false;\n    this.errorMessage = '';\n    this.showAddSkillForm = false;\n    this.editingSkill = null;\n    this.skillForm = this.fb.group({\n      employee_id: ['', Validators.required],\n      skill_id: ['', Validators.required],\n      actual_skill_level_id: [null, Validators.required],\n      acquired_date: [''],\n      certification: [''],\n      last_evaluated_date: ['']\n    });\n  }\n  ngOnInit() {\n    this.loadEmployees();\n    this.loadSkills();\n    this.loadSkillLevels();\n    this.loadEmployeeSkills();\n  }\n  loadEmployees() {\n    this.employeeService.getEmployees().subscribe({\n      next: res => this.employees = res,\n      error: err => this.errorMessage = 'Erreur lors du chargement des employés'\n    });\n  }\n  loadSkills() {\n    this.skillService.getSkills().subscribe({\n      next: res => this.skillsList = res,\n      error: err => this.errorMessage = 'Erreur lors du chargement des compétences'\n    });\n  }\n  loadSkillLevels() {\n    this.skillService.getSkillLevels().subscribe({\n      next: res => this.skillLevels = res,\n      error: err => this.errorMessage = 'Erreur lors du chargement des niveaux'\n    });\n  }\n  loadEmployeeSkills() {\n    this.loadingSkills = true;\n    this.employeeSkillService.getAll().subscribe({\n      next: res => {\n        this.skills = res;\n        this.loadingSkills = false;\n      },\n      error: err => {\n        this.errorMessage = 'Erreur lors du chargement des compétences des employés';\n        this.loadingSkills = false;\n      }\n    });\n  }\n  // Ajout / mise à jour\n  onSubmit() {\n    if (this.editingSkill) {\n      this.updateSkill();\n    } else {\n      this.addSkill();\n    }\n  }\n  addSkill() {\n    const employeeId = this.skillForm.value.employee_id;\n    const skillId = this.skillForm.value.skill_id;\n    // Vérifie doublon avant POST\n    const exists = this.skills.some(s => s.employee_id === employeeId && s.skill_id === skillId);\n    if (exists) {\n      alert('Cette compétence est déjà assignée à cet employé.');\n      return;\n    }\n    this.employeeSkillService.create(this.skillForm.value).subscribe({\n      next: res => {\n        this.skills.push(res);\n        this.skillForm.reset();\n        this.showAddSkillForm = false;\n      },\n      error: err => {\n        if (err.status === 409) {\n          alert('Cette compétence existe déjà pour cet employé.');\n        } else {\n          console.error(err);\n          alert('Erreur lors de l’ajout de la compétence.');\n        }\n      }\n    });\n  }\n  editSkill(skill) {\n    this.editingSkill = skill;\n    this.showAddSkillForm = true;\n    this.skillForm.patchValue({\n      employee_id: skill.employee_id,\n      skill_id: skill.skill_id,\n      actual_skill_level_id: skill.SkillLevel,\n      acquired_date: skill.acquired_date,\n      certification: skill.certification,\n      last_evaluated_date: skill.last_evaluated_date\n    });\n  }\n  updateSkill() {\n    const employeeId = this.skillForm.value.employee_id;\n    const skillId = this.skillForm.value.skill_id;\n    // Vérifie doublon sauf pour la compétence actuelle\n    const exists = this.skills.some(s => s.employee_id === employeeId && s.skill_id === skillId && s.id !== this.editingSkill.id);\n    if (exists) {\n      alert('Cette compétence est déjà assignée à cet employé.');\n      return;\n    }\n    this.employeeSkillService.update(this.editingSkill.id, this.skillForm.value).subscribe({\n      next: res => {\n        const index = this.skills.findIndex(s => s.id === this.editingSkill.id);\n        if (index > -1) this.skills[index] = res;\n        this.cancelEdit();\n      },\n      error: err => {\n        console.error(err);\n        alert('Erreur lors de la mise à jour.');\n      }\n    });\n  }\n  deleteSkill(skill) {\n    if (!confirm('Êtes-vous sûr de vouloir supprimer cette compétence ?')) return;\n    this.employeeSkillService.delete(skill.id).subscribe({\n      next: () => {\n        this.skills = this.skills.filter(s => s.id !== skill.id);\n      },\n      error: err => {\n        console.error(err);\n        alert('Erreur lors de la suppression.');\n      }\n    });\n  }\n  cancelEdit() {\n    this.editingSkill = null;\n    this.showAddSkillForm = false;\n    this.skillForm.reset();\n  }\n  getEmployeeSkills(employeeId) {\n    return this.skills.filter(s => s.employee_id === employeeId);\n  }\n};\nEmployeeSkillsComponent = __decorate([Component({\n  selector: 'app-employee-skills',\n  templateUrl: './employee-skills.component.html',\n  styleUrls: ['./employee-skills.component.css']\n})], EmployeeSkillsComponent);\nexport { EmployeeSkillsComponent };","map":{"version":3,"names":["Component","Validators","EmployeeSkillsComponent","constructor","fb","employeeService","skillService","employeeSkillService","employees","skillsList","skillLevels","skills","loading","loadingSkills","errorMessage","showAddSkillForm","editingSkill","skillForm","group","employee_id","required","skill_id","actual_skill_level_id","acquired_date","certification","last_evaluated_date","ngOnInit","loadEmployees","loadSkills","loadSkillLevels","loadEmployeeSkills","getEmployees","subscribe","next","res","error","err","getSkills","getSkillLevels","getAll","onSubmit","updateSkill","addSkill","employeeId","value","skillId","exists","some","s","alert","create","push","reset","status","console","editSkill","skill","patchValue","SkillLevel","id","update","index","findIndex","cancelEdit","deleteSkill","confirm","delete","filter","getEmployeeSkills","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\components\\employee-skill\\employee-skill.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { EmployeeService } from '../../services/employee.service';\nimport { SkillService } from '../../services/skill.service';\nimport { EmployeeSkillService } from '../../services/employee-skill.service';\n\n@Component({\n  selector: 'app-employee-skills',\n  templateUrl: './employee-skills.component.html',\n  styleUrls: ['./employee-skills.component.css']\n})\nexport class EmployeeSkillsComponent implements OnInit {\n  employees: any[] = [];\n  skillsList: any[] = [];\n  skillLevels: any[] = [];\n  skills: any[] = []; // EmployeeSkill[]\n  \n  loading: boolean = false;\n  loadingSkills: boolean = false;\n  errorMessage: string = '';\n\n  showAddSkillForm: boolean = false;\n  editingSkill: any = null;\n\n  skillForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private employeeService: EmployeeService,\n    private skillService: SkillService,\n    private employeeSkillService: EmployeeSkillService\n  ) {\n    this.skillForm = this.fb.group({\n      employee_id: ['', Validators.required],\n      skill_id: ['', Validators.required],\n      actual_skill_level_id: [null, Validators.required],\n      acquired_date: [''],\n      certification: [''],\n      last_evaluated_date: ['']\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadEmployees();\n    this.loadSkills();\n    this.loadSkillLevels();\n    this.loadEmployeeSkills();\n  }\n\n  loadEmployees() {\n    this.employeeService.getEmployees().subscribe({\n      next: (res) => this.employees = res,\n      error: (err) => this.errorMessage = 'Erreur lors du chargement des employés'\n    });\n  }\n\n  loadSkills() {\n    this.skillService.getSkills().subscribe({\n      next: (res) => this.skillsList = res,\n      error: (err) => this.errorMessage = 'Erreur lors du chargement des compétences'\n    });\n  }\n\n  loadSkillLevels() {\n    this.skillService.getSkillLevels().subscribe({\n      next: (res) => this.skillLevels = res,\n      error: (err) => this.errorMessage = 'Erreur lors du chargement des niveaux'\n    });\n  }\n\n  loadEmployeeSkills() {\n    this.loadingSkills = true;\n    this.employeeSkillService.getAll().subscribe({\n      next: (res) => {\n        this.skills = res;\n        this.loadingSkills = false;\n      },\n      error: (err) => {\n        this.errorMessage = 'Erreur lors du chargement des compétences des employés';\n        this.loadingSkills = false;\n      }\n    });\n  }\n\n  // Ajout / mise à jour\n  onSubmit() {\n    if (this.editingSkill) {\n      this.updateSkill();\n    } else {\n      this.addSkill();\n    }\n  }\n\n  addSkill() {\n    const employeeId = this.skillForm.value.employee_id;\n    const skillId = this.skillForm.value.skill_id;\n\n    // Vérifie doublon avant POST\n    const exists = this.skills.some(s => s.employee_id === employeeId && s.skill_id === skillId);\n    if (exists) {\n      alert('Cette compétence est déjà assignée à cet employé.');\n      return;\n    }\n\n    this.employeeSkillService.create(this.skillForm.value).subscribe({\n      next: (res) => {\n        this.skills.push(res);\n        this.skillForm.reset();\n        this.showAddSkillForm = false;\n      },\n      error: (err) => {\n        if (err.status === 409) {\n          alert('Cette compétence existe déjà pour cet employé.');\n        } else {\n          console.error(err);\n          alert('Erreur lors de l’ajout de la compétence.');\n        }\n      }\n    });\n  }\n\n  editSkill(skill: any) {\n    this.editingSkill = skill;\n    this.showAddSkillForm = true;\n    this.skillForm.patchValue({\n      employee_id: skill.employee_id,\n      skill_id: skill.skill_id,\n      actual_skill_level_id: skill.SkillLevel,\n      acquired_date: skill.acquired_date,\n      certification: skill.certification,\n      last_evaluated_date: skill.last_evaluated_date\n    });\n  }\n\n  updateSkill() {\n    const employeeId = this.skillForm.value.employee_id;\n    const skillId = this.skillForm.value.skill_id;\n\n    // Vérifie doublon sauf pour la compétence actuelle\n    const exists = this.skills.some(s => s.employee_id === employeeId && s.skill_id === skillId && s.id !== this.editingSkill.id);\n    if (exists) {\n      alert('Cette compétence est déjà assignée à cet employé.');\n      return;\n    }\n\n    this.employeeSkillService.update(this.editingSkill.id, this.skillForm.value).subscribe({\n      next: (res) => {\n        const index = this.skills.findIndex(s => s.id === this.editingSkill.id);\n        if (index > -1) this.skills[index] = res;\n        this.cancelEdit();\n      },\n      error: (err) => {\n        console.error(err);\n        alert('Erreur lors de la mise à jour.');\n      }\n    });\n  }\n\n  deleteSkill(skill: any) {\n    if (!confirm('Êtes-vous sûr de vouloir supprimer cette compétence ?')) return;\n\n    this.employeeSkillService.delete(skill.id).subscribe({\n      next: () => {\n        this.skills = this.skills.filter(s => s.id !== skill.id);\n      },\n      error: (err) => {\n        console.error(err);\n        alert('Erreur lors de la suppression.');\n      }\n    });\n  }\n\n  cancelEdit() {\n    this.editingSkill = null;\n    this.showAddSkillForm = false;\n    this.skillForm.reset();\n  }\n\n  getEmployeeSkills(employeeId: number) {\n    return this.skills.filter(s => s.employee_id === employeeId);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}