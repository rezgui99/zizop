{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserManagementService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.backendUrl}/admin`;\n  }\n  // Gestion des utilisateurs\n  getUsers(page = 1, limit = 10, search, role, isActive) {\n    let params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    if (search) params = params.set('search', search);\n    if (role) params = params.set('role', role);\n    if (isActive !== undefined) params = params.set('isActive', isActive.toString());\n    return this.http.get(`${this.apiUrl}/users`, {\n      params\n    });\n  }\n  getUserById(id) {\n    return this.http.get(`${this.apiUrl}/users/${id}`);\n  }\n  createUser(userData) {\n    return this.http.post(`${this.apiUrl}/users`, userData);\n  }\n  updateUser(id, userData) {\n    return this.http.put(`${this.apiUrl}/users/${id}`, userData);\n  }\n  deleteUser(id, soft = true) {\n    const params = new HttpParams().set('soft', soft.toString());\n    return this.http.delete(`${this.apiUrl}/users/${id}`, {\n      params\n    });\n  }\n  toggleUserStatus(id) {\n    return this.http.patch(`${this.apiUrl}/users/${id}/toggle-status`, {});\n  }\n  adminResetPassword(id, newPassword) {\n    return this.http.post(`${this.apiUrl}/users/${id}/reset-password`, {\n      newPassword\n    });\n  }\n  // Gestion des rôles\n  getRoles() {\n    return this.http.get(`${this.apiUrl}/roles`);\n  }\n  assignRole(assignData) {\n    return this.http.post(`${this.apiUrl}/roles/assign`, assignData);\n  }\n  removeRole(removeData) {\n    return this.http.post(`${this.apiUrl}/roles/remove`, removeData);\n  }\n  // Audit\n  getUserAuditHistory(id, page = 1, limit = 20) {\n    const params = new HttpParams().set('page', page.toString()).set('limit', limit.toString());\n    return this.http.get(`${this.apiUrl}/users/${id}/audit`, {\n      params\n    });\n  }\n  static {\n    this.ɵfac = function UserManagementService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || UserManagementService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserManagementService,\n      factory: UserManagementService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","environment","UserManagementService","constructor","http","apiUrl","backendUrl","getUsers","page","limit","search","role","isActive","params","set","toString","undefined","get","getUserById","id","createUser","userData","post","updateUser","put","deleteUser","soft","delete","toggleUserStatus","patch","adminResetPassword","newPassword","getRoles","assignRole","assignData","removeRole","removeData","getUserAuditHistory","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\services\\user-management.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  UserManagement, \r\n  Role, \r\n  CreateUserRequest, \r\n  UpdateUserRequest, \r\n  AssignRoleRequest,\r\n  UsersResponse,\r\n  RolesResponse,\r\n  AuditResponse\r\n} from '../models/user-management.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserManagementService {\r\n  private apiUrl = `${environment.backendUrl}/admin`;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Gestion des utilisateurs\r\n  getUsers(page: number = 1, limit: number = 10, search?: string, role?: string, isActive?: boolean): Observable<UsersResponse> {\r\n    let params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('limit', limit.toString());\r\n    \r\n    if (search) params = params.set('search', search);\r\n    if (role) params = params.set('role', role);\r\n    if (isActive !== undefined) params = params.set('isActive', isActive.toString());\r\n\r\n    return this.http.get<UsersResponse>(`${this.apiUrl}/users`, { params });\r\n  }\r\n\r\n  getUserById(id: number): Observable<{ user: UserManagement }> {\r\n    return this.http.get<{ user: UserManagement }>(`${this.apiUrl}/users/${id}`);\r\n  }\r\n\r\n  createUser(userData: CreateUserRequest): Observable<{ message: string; user: UserManagement }> {\r\n    return this.http.post<{ message: string; user: UserManagement }>(`${this.apiUrl}/users`, userData);\r\n  }\r\n\r\n  updateUser(id: number, userData: UpdateUserRequest): Observable<{ message: string; user: UserManagement }> {\r\n    return this.http.put<{ message: string; user: UserManagement }>(`${this.apiUrl}/users/${id}`, userData);\r\n  }\r\n\r\n  deleteUser(id: number, soft: boolean = true): Observable<{ message: string }> {\r\n    const params = new HttpParams().set('soft', soft.toString());\r\n    return this.http.delete<{ message: string }>(`${this.apiUrl}/users/${id}`, { params });\r\n  }\r\n\r\n  toggleUserStatus(id: number): Observable<{ message: string; user: UserManagement }> {\r\n    return this.http.patch<{ message: string; user: UserManagement }>(`${this.apiUrl}/users/${id}/toggle-status`, {});\r\n  }\r\n\r\n  adminResetPassword(id: number, newPassword: string): Observable<{ message: string }> {\r\n    return this.http.post<{ message: string }>(`${this.apiUrl}/users/${id}/reset-password`, { newPassword });\r\n  }\r\n\r\n  // Gestion des rôles\r\n  getRoles(): Observable<RolesResponse> {\r\n    return this.http.get<RolesResponse>(`${this.apiUrl}/roles`);\r\n  }\r\n\r\n  assignRole(assignData: AssignRoleRequest): Observable<{ message: string }> {\r\n    return this.http.post<{ message: string }>(`${this.apiUrl}/roles/assign`, assignData);\r\n  }\r\n\r\n  removeRole(removeData: AssignRoleRequest): Observable<{ message: string }> {\r\n    return this.http.post<{ message: string }>(`${this.apiUrl}/roles/remove`, removeData);\r\n  }\r\n\r\n  // Audit\r\n  getUserAuditHistory(id: number, page: number = 1, limit: number = 20): Observable<AuditResponse> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('limit', limit.toString());\r\n\r\n    return this.http.get<AuditResponse>(`${this.apiUrl}/users/${id}/audit`, { params });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}