{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    // Add auth token to requests\n    const token = this.authService.token;\n    if (token) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(req).pipe(catchError(error => {\n      // Handle 401 errors (unauthorized)\n      if (error.status === 401) {\n        // Token might be expired or invalid\n        this.authService.forceLogout();\n      }\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","AuthInterceptor","constructor","authService","intercept","req","next","token","clone","setHeaders","Authorization","handle","pipe","error","status","forceLogout","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Add auth token to requests\r\n    const token = this.authService.token;\r\n    \r\n    if (token) {\r\n      req = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n    }\r\n\r\n    return next.handle(req).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        // Handle 401 errors (unauthorized)\r\n        if (error.status === 401) {\r\n          // Token might be expired or invalid\r\n          this.authService.forceLogout();\r\n        }\r\n        \r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACI,KAAK;IAEpC,IAAIA,KAAK,EAAE;MACTF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC;QACdC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUH,KAAK;;OAEjC,CAAC;IACJ;IAEA,OAAOD,IAAI,CAACK,MAAM,CAACN,GAAG,CAAC,CAACO,IAAI,CAC1BZ,UAAU,CAAEa,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACA,IAAI,CAACX,WAAW,CAACY,WAAW,EAAE;MAChC;MAEA,OAAOhB,UAAU,CAAC,MAAMc,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uCA1BWZ,eAAe,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAflB,eAAe;MAAAmB,OAAA,EAAfnB,eAAe,CAAAoB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}