{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated) {\n      // Check for required roles if specified in route data\n      const requiredRoles = route.data['roles'];\n      if (requiredRoles && requiredRoles.length > 0) {\n        if (!this.authService.hasAnyRole(requiredRoles)) {\n          this.router.navigate(['/unauthorized']);\n          return false;\n        }\n      }\n      return true;\n    }\n    // Store the attempted URL for redirecting after login\n    this.router.navigate(['/auth/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","requiredRoles","data","length","hasAnyRole","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    \r\n    if (this.authService.isAuthenticated) {\r\n      // Check for required roles if specified in route data\r\n      const requiredRoles = route.data['roles'] as string[];\r\n      \r\n      if (requiredRoles && requiredRoles.length > 0) {\r\n        if (!this.authService.hasAnyRole(requiredRoles)) {\r\n          this.router.navigate(['/unauthorized']);\r\n          return false;\r\n        }\r\n      }\r\n      \r\n      return true;\r\n    }\r\n\r\n    // Store the attempted URL for redirecting after login\r\n    this.router.navigate(['/auth/login'], { \r\n      queryParams: { returnUrl: state.url } \r\n    });\r\n    \r\n    return false;\r\n  }\r\n}"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAG1B,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;MACpC;MACA,MAAMC,aAAa,GAAGH,KAAK,CAACI,IAAI,CAAC,OAAO,CAAa;MAErD,IAAID,aAAa,IAAIA,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;QAC7C,IAAI,CAAC,IAAI,CAACR,WAAW,CAACS,UAAU,CAACH,aAAa,CAAC,EAAE;UAC/C,IAAI,CAACL,MAAM,CAACS,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;UACvC,OAAO,KAAK;QACd;MACF;MAEA,OAAO,IAAI;IACb;IAEA;IACA,IAAI,CAACT,MAAM,CAACS,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE;MACpCC,WAAW,EAAE;QAAEC,SAAS,EAAER,KAAK,CAACS;MAAG;KACpC,CAAC;IAEF,OAAO,KAAK;EACd;;;uCA/BWf,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATrB,SAAS;MAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}