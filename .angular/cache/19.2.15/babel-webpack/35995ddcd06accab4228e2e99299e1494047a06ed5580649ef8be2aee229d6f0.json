{"ast":null,"code":"import { provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\nimport { routes } from './app.routes';\nexport const appConfig = {\n  providers: [provideZoneChangeDetection({\n    eventCoalescing: true\n  }), provideRouter(routes), provideHttpClient(withInterceptors([(req, next) => new AuthInterceptor().intercept(req, next)]))]\n};","map":{"version":3,"names":["provideZoneChangeDetection","provideRouter","provideHttpClient","withInterceptors","AuthInterceptor","routes","appConfig","providers","eventCoalescing","req","next","intercept"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\app.config.ts"],"sourcesContent":["import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\nimport { provideHttpClient, withInterceptors } from '@angular/common/http';\nimport { AuthInterceptor } from './interceptors/auth.interceptor';\nimport { routes } from './app.routes';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }), \n    provideRouter(routes),\n    provideHttpClient(withInterceptors([\n      (req, next) => new AuthInterceptor().intercept(req, next)\n    ]))\n  ]\n};"],"mappings":"AAAA,SAA4BA,0BAA0B,QAAQ,eAAe;AAC7E,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAC1E,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,MAAM,QAAQ,cAAc;AAErC,OAAO,MAAMC,SAAS,GAAsB;EAC1CC,SAAS,EAAE,CACTP,0BAA0B,CAAC;IAAEQ,eAAe,EAAE;EAAI,CAAE,CAAC,EACrDP,aAAa,CAACI,MAAM,CAAC,EACrBH,iBAAiB,CAACC,gBAAgB,CAAC,CACjC,CAACM,GAAG,EAAEC,IAAI,KAAK,IAAIN,eAAe,EAAE,CAACO,SAAS,CAACF,GAAG,EAAEC,IAAI,CAAC,CAC1D,CAAC,CAAC;CAEN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}