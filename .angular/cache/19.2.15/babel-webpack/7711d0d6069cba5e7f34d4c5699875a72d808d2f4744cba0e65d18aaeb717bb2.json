{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nlet UserManagementComponent = class UserManagementComponent {\n  constructor(userManagementService, authService, formBuilder) {\n    this.userManagementService = userManagementService;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.users = [];\n    this.roles = [];\n    // Pagination\n    this.currentPage = 1;\n    this.totalPages = 1;\n    this.totalUsers = 0;\n    this.pageSize = 10;\n    // Filtres\n    this.searchQuery = '';\n    this.selectedRole = '';\n    this.selectedStatus = '';\n    // États\n    this.loading = false;\n    this.showCreateForm = false;\n    this.editingUser = null;\n    this.showPasswordResetModal = false;\n    this.resettingPasswordUser = null;\n    this.showRoleModal = false;\n    this.managingRolesUser = null;\n    // Messages\n    this.errorMessage = null;\n    this.successMessage = null;\n    this.userForm = this.formBuilder.group({\n      username: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\n      firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\n      lastName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      roleIds: [[]]\n    });\n    this.passwordResetForm = this.formBuilder.group({\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n  ngOnInit() {\n    this.loadUsers();\n    this.loadRoles();\n  }\n  loadUsers() {\n    this.loading = true;\n    this.errorMessage = null;\n    const isActive = this.selectedStatus === 'active' ? true : this.selectedStatus === 'inactive' ? false : undefined;\n    this.userManagementService.getUsers(this.currentPage, this.pageSize, this.searchQuery || undefined, this.selectedRole || undefined, isActive).subscribe({\n      next: response => {\n        this.users = response.users;\n        this.totalUsers = response.pagination.total;\n        this.totalPages = response.pagination.totalPages;\n        this.loading = false;\n      },\n      error: err => {\n        console.error('Error loading users:', err);\n        this.errorMessage = 'Erreur lors du chargement des utilisateurs';\n        this.loading = false;\n      }\n    });\n  }\n  loadRoles() {\n    this.userManagementService.getRoles().subscribe({\n      next: response => {\n        this.roles = response.roles;\n      },\n      error: err => {\n        console.error('Error loading roles:', err);\n      }\n    });\n  }\n  onSearch() {\n    this.currentPage = 1;\n    this.loadUsers();\n  }\n  onFilterChange() {\n    this.currentPage = 1;\n    this.loadUsers();\n  }\n  clearFilters() {\n    this.searchQuery = '';\n    this.selectedRole = '';\n    this.selectedStatus = '';\n    this.currentPage = 1;\n    this.loadUsers();\n  }\n  // Pagination\n  goToPage(page) {\n    if (page >= 1 && page <= this.totalPages) {\n      this.currentPage = page;\n      this.loadUsers();\n    }\n  }\n  // Gestion des utilisateurs\n  showCreateUserForm() {\n    this.showCreateForm = true;\n    this.editingUser = null;\n    this.userForm.reset();\n    this.userForm.get('password')?.setValidators([Validators.required, Validators.minLength(6)]);\n    this.clearMessages();\n  }\n  editUser(user) {\n    this.editingUser = user;\n    this.showCreateForm = true;\n    this.userForm.patchValue({\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      roleIds: user.roles.map(role => role.id)\n    });\n    // Retirer la validation obligatoire du mot de passe pour la modification\n    this.userForm.get('password')?.clearValidators();\n    this.userForm.get('password')?.updateValueAndValidity();\n    this.clearMessages();\n  }\n  onUserSubmit() {\n    if (this.userForm.valid) {\n      const formData = this.userForm.value;\n      if (this.editingUser) {\n        // Mise à jour\n        const updateData = {\n          username: formData.username,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email\n        };\n        if (formData.password) {\n          updateData.password = formData.password;\n        }\n        this.userManagementService.updateUser(this.editingUser.id, updateData).subscribe({\n          next: response => {\n            this.successMessage = response.message;\n            this.loadUsers();\n            this.cancelUserForm();\n          },\n          error: err => {\n            this.errorMessage = err.error?.message || 'Erreur lors de la mise à jour';\n          }\n        });\n      } else {\n        // Création\n        const createData = {\n          username: formData.username,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          password: formData.password,\n          roleIds: formData.roleIds\n        };\n        this.userManagementService.createUser(createData).subscribe({\n          next: response => {\n            this.successMessage = response.message;\n            this.loadUsers();\n            this.cancelUserForm();\n          },\n          error: err => {\n            this.errorMessage = err.error?.message || 'Erreur lors de la création';\n          }\n        });\n      }\n    }\n  }\n  cancelUserForm() {\n    this.showCreateForm = false;\n    this.editingUser = null;\n    this.userForm.reset();\n    this.clearMessages();\n  }\n  deleteUser(user, permanent = false) {\n    const action = permanent ? 'supprimer définitivement' : 'désactiver';\n    const confirmMessage = `Êtes-vous sûr de vouloir ${action} l'utilisateur \"${user.username}\" ?`;\n    if (window.confirm(confirmMessage)) {\n      this.userManagementService.deleteUser(user.id, !permanent).subscribe({\n        next: response => {\n          this.successMessage = response.message;\n          this.loadUsers();\n        },\n        error: err => {\n          this.errorMessage = err.error?.message || `Erreur lors de la ${action}`;\n        }\n      });\n    }\n  }\n  toggleUserStatus(user) {\n    const action = user.isActive ? 'désactiver' : 'activer';\n    if (window.confirm(`Êtes-vous sûr de vouloir ${action} l'utilisateur \"${user.username}\" ?`)) {\n      this.userManagementService.toggleUserStatus(user.id).subscribe({\n        next: response => {\n          this.successMessage = response.message;\n          this.loadUsers();\n        },\n        error: err => {\n          this.errorMessage = err.error?.message || `Erreur lors de l'${action}`;\n        }\n      });\n    }\n  }\n  // Gestion des rôles\n  showRoleManagement(user) {\n    this.managingRolesUser = user;\n    this.showRoleModal = true;\n    this.clearMessages();\n  }\n  assignRole(roleId) {\n    if (!this.managingRolesUser) return;\n    this.userManagementService.assignRole({\n      userId: this.managingRolesUser.id,\n      roleId: roleId\n    }).subscribe({\n      next: response => {\n        this.successMessage = response.message;\n        this.loadUsers();\n        this.closeRoleModal();\n      },\n      error: err => {\n        this.errorMessage = err.error?.message || 'Erreur lors de l\\'attribution du rôle';\n      }\n    });\n  }\n  removeRole(roleId) {\n    if (!this.managingRolesUser) return;\n    const role = this.roles.find(r => r.id === roleId);\n    if (window.confirm(`Retirer le rôle \"${role?.name}\" de ${this.managingRolesUser.username} ?`)) {\n      this.userManagementService.removeRole({\n        userId: this.managingRolesUser.id,\n        roleId: roleId\n      }).subscribe({\n        next: response => {\n          this.successMessage = response.message;\n          this.loadUsers();\n          this.closeRoleModal();\n        },\n        error: err => {\n          this.errorMessage = err.error?.message || 'Erreur lors du retrait du rôle';\n        }\n      });\n    }\n  }\n  closeRoleModal() {\n    this.showRoleModal = false;\n    this.managingRolesUser = null;\n  }\n  // Réinitialisation de mot de passe\n  showPasswordReset(user) {\n    this.resettingPasswordUser = user;\n    this.showPasswordResetModal = true;\n    this.passwordResetForm.reset();\n    this.clearMessages();\n  }\n  onPasswordResetSubmit() {\n    if (this.passwordResetForm.valid && this.resettingPasswordUser) {\n      const newPassword = this.passwordResetForm.value.newPassword;\n      this.userManagementService.adminResetPassword(this.resettingPasswordUser.id, newPassword).subscribe({\n        next: response => {\n          this.successMessage = response.message;\n          this.closePasswordResetModal();\n        },\n        error: err => {\n          this.errorMessage = err.error?.message || 'Erreur lors de la réinitialisation';\n        }\n      });\n    }\n  }\n  closePasswordResetModal() {\n    this.showPasswordResetModal = false;\n    this.resettingPasswordUser = null;\n    this.passwordResetForm.reset();\n  }\n  // Utilitaires\n  getUserRoleNames(user) {\n    return user.roles.map(role => role.name).join(', ') || 'Aucun rôle';\n  }\n  hasRole(user, roleName) {\n    return user.roles.some(role => role.name === roleName);\n  }\n  getAvailableRoles(user) {\n    const userRoleIds = user.roles.map(role => role.id);\n    return this.roles.filter(role => !userRoleIds.includes(role.id) && role.is_active);\n  }\n  onRoleCheckboxChange(event, roleId) {\n    const roleIds = this.userForm.get('roleIds')?.value || [];\n    if (event.target.checked) {\n      if (!roleIds.includes(roleId)) {\n        roleIds.push(roleId);\n      }\n    } else {\n      const index = roleIds.indexOf(roleId);\n      if (index > -1) {\n        roleIds.splice(index, 1);\n      }\n    }\n    this.userForm.patchValue({\n      roleIds\n    });\n  }\n  clearMessages() {\n    this.errorMessage = null;\n    this.successMessage = null;\n  }\n  // Vérification des permissions\n  get canManageUsers() {\n    return this.authService.isAdmin;\n  }\n  get currentUserId() {\n    return this.authService.currentUser?.id || null;\n  }\n};\nUserManagementComponent = __decorate([Component({\n  selector: 'app-user-management',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './user-management.component.html',\n  styleUrls: ['./user-management.component.css']\n})], UserManagementComponent);\nexport { UserManagementComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","ReactiveFormsModule","Validators","UserManagementComponent","constructor","userManagementService","authService","formBuilder","users","roles","currentPage","totalPages","totalUsers","pageSize","searchQuery","selectedRole","selectedStatus","loading","showCreateForm","editingUser","showPasswordResetModal","resettingPasswordUser","showRoleModal","managingRolesUser","errorMessage","successMessage","userForm","group","username","required","minLength","maxLength","firstName","lastName","email","password","roleIds","passwordResetForm","newPassword","ngOnInit","loadUsers","loadRoles","isActive","undefined","getUsers","subscribe","next","response","pagination","total","error","err","console","getRoles","onSearch","onFilterChange","clearFilters","goToPage","page","showCreateUserForm","reset","get","setValidators","clearMessages","editUser","user","patchValue","map","role","id","clearValidators","updateValueAndValidity","onUserSubmit","valid","formData","value","updateData","updateUser","message","cancelUserForm","createData","createUser","deleteUser","permanent","action","confirmMessage","window","confirm","toggleUserStatus","showRoleManagement","assignRole","roleId","userId","closeRoleModal","removeRole","find","r","name","showPasswordReset","onPasswordResetSubmit","adminResetPassword","closePasswordResetModal","getUserRoleNames","join","hasRole","roleName","some","getAvailableRoles","userRoleIds","filter","includes","is_active","onRoleCheckboxChange","event","target","checked","push","index","indexOf","splice","canManageUsers","isAdmin","currentUserId","currentUser","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\admin\\user-management\\user-management.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserManagementService } from '../../../services/user-management.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { UserManagement, Role, CreateUserRequest, UpdateUserRequest } from '../../../models/user-management.model';\r\n\r\n@Component({\r\n  selector: 'app-user-management',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\r\n  templateUrl: './user-management.component.html',\r\n  styleUrls: ['./user-management.component.css']\r\n})\r\nexport class UserManagementComponent implements OnInit {\r\n  users: UserManagement[] = [];\r\n  roles: Role[] = [];\r\n  \r\n  // Pagination\r\n  currentPage: number = 1;\r\n  totalPages: number = 1;\r\n  totalUsers: number = 0;\r\n  pageSize: number = 10;\r\n  \r\n  // Filtres\r\n  searchQuery: string = '';\r\n  selectedRole: string = '';\r\n  selectedStatus: string = '';\r\n  \r\n  // Formulaires\r\n  userForm: FormGroup;\r\n  passwordResetForm: FormGroup;\r\n  \r\n  // États\r\n  loading: boolean = false;\r\n  showCreateForm: boolean = false;\r\n  editingUser: UserManagement | null = null;\r\n  showPasswordResetModal: boolean = false;\r\n  resettingPasswordUser: UserManagement | null = null;\r\n  showRoleModal: boolean = false;\r\n  managingRolesUser: UserManagement | null = null;\r\n  \r\n  // Messages\r\n  errorMessage: string | null = null;\r\n  successMessage: string | null = null;\r\nMath: any;\r\n\r\n  constructor(\r\n    private userManagementService: UserManagementService,\r\n    private authService: AuthService,\r\n    private formBuilder: FormBuilder\r\n  ) {\r\n    this.userForm = this.formBuilder.group({\r\n      username: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n      firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\r\n      lastName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]],\r\n      roleIds: [[]]\r\n    });\r\n\r\n    this.passwordResetForm = this.formBuilder.group({\r\n      newPassword: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadUsers();\r\n    this.loadRoles();\r\n  }\r\n\r\n  loadUsers(): void {\r\n    this.loading = true;\r\n    this.errorMessage = null;\r\n    \r\n    const isActive = this.selectedStatus === 'active' ? true : \r\n                    this.selectedStatus === 'inactive' ? false : undefined;\r\n\r\n    this.userManagementService.getUsers(\r\n      this.currentPage, \r\n      this.pageSize, \r\n      this.searchQuery || undefined, \r\n      this.selectedRole || undefined, \r\n      isActive\r\n    ).subscribe({\r\n      next: (response) => {\r\n        this.users = response.users;\r\n        this.totalUsers = response.pagination.total;\r\n        this.totalPages = response.pagination.totalPages;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading users:', err);\r\n        this.errorMessage = 'Erreur lors du chargement des utilisateurs';\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  loadRoles(): void {\r\n    this.userManagementService.getRoles().subscribe({\r\n      next: (response) => {\r\n        this.roles = response.roles;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading roles:', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  onSearch(): void {\r\n    this.currentPage = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  onFilterChange(): void {\r\n    this.currentPage = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.searchQuery = '';\r\n    this.selectedRole = '';\r\n    this.selectedStatus = '';\r\n    this.currentPage = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  // Pagination\r\n  goToPage(page: number): void {\r\n    if (page >= 1 && page <= this.totalPages) {\r\n      this.currentPage = page;\r\n      this.loadUsers();\r\n    }\r\n  }\r\n\r\n  // Gestion des utilisateurs\r\n  showCreateUserForm(): void {\r\n    this.showCreateForm = true;\r\n    this.editingUser = null;\r\n    this.userForm.reset();\r\n    this.userForm.get('password')?.setValidators([Validators.required, Validators.minLength(6)]);\r\n    this.clearMessages();\r\n  }\r\n\r\n  editUser(user: UserManagement): void {\r\n    this.editingUser = user;\r\n    this.showCreateForm = true;\r\n    this.userForm.patchValue({\r\n      username: user.username,\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      email: user.email,\r\n      roleIds: user.roles.map(role => role.id)\r\n    });\r\n    // Retirer la validation obligatoire du mot de passe pour la modification\r\n    this.userForm.get('password')?.clearValidators();\r\n    this.userForm.get('password')?.updateValueAndValidity();\r\n    this.clearMessages();\r\n  }\r\n\r\n  onUserSubmit(): void {\r\n    if (this.userForm.valid) {\r\n      const formData = this.userForm.value;\r\n      \r\n      if (this.editingUser) {\r\n        // Mise à jour\r\n        const updateData: UpdateUserRequest = {\r\n          username: formData.username,\r\n          firstName: formData.firstName,\r\n          lastName: formData.lastName,\r\n          email: formData.email\r\n        };\r\n        \r\n        if (formData.password) {\r\n          updateData.password = formData.password;\r\n        }\r\n\r\n        this.userManagementService.updateUser(this.editingUser.id, updateData).subscribe({\r\n          next: (response) => {\r\n            this.successMessage = response.message;\r\n            this.loadUsers();\r\n            this.cancelUserForm();\r\n          },\r\n          error: (err) => {\r\n            this.errorMessage = err.error?.message || 'Erreur lors de la mise à jour';\r\n          }\r\n        });\r\n      } else {\r\n        // Création\r\n        const createData: CreateUserRequest = {\r\n          username: formData.username,\r\n          firstName: formData.firstName,\r\n          lastName: formData.lastName,\r\n          email: formData.email,\r\n          password: formData.password,\r\n          roleIds: formData.roleIds\r\n        };\r\n\r\n        this.userManagementService.createUser(createData).subscribe({\r\n          next: (response) => {\r\n            this.successMessage = response.message;\r\n            this.loadUsers();\r\n            this.cancelUserForm();\r\n          },\r\n          error: (err) => {\r\n            this.errorMessage = err.error?.message || 'Erreur lors de la création';\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  cancelUserForm(): void {\r\n    this.showCreateForm = false;\r\n    this.editingUser = null;\r\n    this.userForm.reset();\r\n    this.clearMessages();\r\n  }\r\n\r\n  deleteUser(user: UserManagement, permanent: boolean = false): void {\r\n    const action = permanent ? 'supprimer définitivement' : 'désactiver';\r\n    const confirmMessage = `Êtes-vous sûr de vouloir ${action} l'utilisateur \"${user.username}\" ?`;\r\n    \r\n    if (window.confirm(confirmMessage)) {\r\n      this.userManagementService.deleteUser(user.id, !permanent).subscribe({\r\n        next: (response) => {\r\n          this.successMessage = response.message;\r\n          this.loadUsers();\r\n        },\r\n        error: (err) => {\r\n          this.errorMessage = err.error?.message || `Erreur lors de la ${action}`;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleUserStatus(user: UserManagement): void {\r\n    const action = user.isActive ? 'désactiver' : 'activer';\r\n    \r\n    if (window.confirm(`Êtes-vous sûr de vouloir ${action} l'utilisateur \"${user.username}\" ?`)) {\r\n      this.userManagementService.toggleUserStatus(user.id).subscribe({\r\n        next: (response) => {\r\n          this.successMessage = response.message;\r\n          this.loadUsers();\r\n        },\r\n        error: (err) => {\r\n          this.errorMessage = err.error?.message || `Erreur lors de l'${action}`;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Gestion des rôles\r\n  showRoleManagement(user: UserManagement): void {\r\n    this.managingRolesUser = user;\r\n    this.showRoleModal = true;\r\n    this.clearMessages();\r\n  }\r\n\r\n  assignRole(roleId: number): void {\r\n    if (!this.managingRolesUser) return;\r\n\r\n    this.userManagementService.assignRole({\r\n      userId: this.managingRolesUser.id,\r\n      roleId: roleId\r\n    }).subscribe({\r\n      next: (response) => {\r\n        this.successMessage = response.message;\r\n        this.loadUsers();\r\n        this.closeRoleModal();\r\n      },\r\n      error: (err) => {\r\n        this.errorMessage = err.error?.message || 'Erreur lors de l\\'attribution du rôle';\r\n      }\r\n    });\r\n  }\r\n\r\n  removeRole(roleId: number): void {\r\n    if (!this.managingRolesUser) return;\r\n\r\n    const role = this.roles.find(r => r.id === roleId);\r\n    if (window.confirm(`Retirer le rôle \"${role?.name}\" de ${this.managingRolesUser.username} ?`)) {\r\n      this.userManagementService.removeRole({\r\n        userId: this.managingRolesUser.id,\r\n        roleId: roleId\r\n      }).subscribe({\r\n        next: (response) => {\r\n          this.successMessage = response.message;\r\n          this.loadUsers();\r\n          this.closeRoleModal();\r\n        },\r\n        error: (err) => {\r\n          this.errorMessage = err.error?.message || 'Erreur lors du retrait du rôle';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  closeRoleModal(): void {\r\n    this.showRoleModal = false;\r\n    this.managingRolesUser = null;\r\n  }\r\n\r\n  // Réinitialisation de mot de passe\r\n  showPasswordReset(user: UserManagement): void {\r\n    this.resettingPasswordUser = user;\r\n    this.showPasswordResetModal = true;\r\n    this.passwordResetForm.reset();\r\n    this.clearMessages();\r\n  }\r\n\r\n  onPasswordResetSubmit(): void {\r\n    if (this.passwordResetForm.valid && this.resettingPasswordUser) {\r\n      const newPassword = this.passwordResetForm.value.newPassword;\r\n      \r\n      this.userManagementService.adminResetPassword(this.resettingPasswordUser.id, newPassword).subscribe({\r\n        next: (response) => {\r\n          this.successMessage = response.message;\r\n          this.closePasswordResetModal();\r\n        },\r\n        error: (err) => {\r\n          this.errorMessage = err.error?.message || 'Erreur lors de la réinitialisation';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  closePasswordResetModal(): void {\r\n    this.showPasswordResetModal = false;\r\n    this.resettingPasswordUser = null;\r\n    this.passwordResetForm.reset();\r\n  }\r\n\r\n  // Utilitaires\r\n  getUserRoleNames(user: UserManagement): string {\r\n    return user.roles.map(role => role.name).join(', ') || 'Aucun rôle';\r\n  }\r\n\r\n  hasRole(user: UserManagement, roleName: string): boolean {\r\n    return user.roles.some(role => role.name === roleName);\r\n  }\r\n\r\n  getAvailableRoles(user: UserManagement): Role[] {\r\n    const userRoleIds = user.roles.map(role => role.id);\r\n    return this.roles.filter(role => !userRoleIds.includes(role.id) && role.is_active);\r\n  }\r\n\r\n  onRoleCheckboxChange(event: any, roleId: number): void {\r\n    const roleIds = this.userForm.get('roleIds')?.value || [];\r\n    \r\n    if (event.target.checked) {\r\n      if (!roleIds.includes(roleId)) {\r\n        roleIds.push(roleId);\r\n      }\r\n    } else {\r\n      const index = roleIds.indexOf(roleId);\r\n      if (index > -1) {\r\n        roleIds.splice(index, 1);\r\n      }\r\n    }\r\n    \r\n    this.userForm.patchValue({ roleIds });\r\n  }\r\n\r\n  clearMessages(): void {\r\n    this.errorMessage = null;\r\n    this.successMessage = null;\r\n  }\r\n\r\n  // Vérification des permissions\r\n  get canManageUsers(): boolean {\r\n    return this.authService.isAdmin;\r\n  }\r\n\r\n  get currentUserId(): number | null {\r\n    return this.authService.currentUser?.id || null;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}