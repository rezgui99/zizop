{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { EmployeeSkillComponent } from '../../components/employee-skill/employee-skill.component';\nlet EmployeesComponent = class EmployeesComponent {\n  constructor(employeeService, skillService, jobDescriptionService, matchingService, formBuilder) {\n    this.employeeService = employeeService;\n    this.skillService = skillService;\n    this.jobDescriptionService = jobDescriptionService;\n    this.matchingService = matchingService;\n    this.formBuilder = formBuilder;\n    this.employees = [];\n    this.employeeSkills = [];\n    this.jobDescriptions = [];\n    this.skills = [];\n    this.skillLevels = [];\n    this.showAddForm = false;\n    this.editingEmployee = null;\n    this.showAssignJobForm = false;\n    this.assigningEmployee = null;\n    this.selectedJobId = null;\n    this.loading = false;\n    this.loadingSkills = false;\n    this.loadingJobs = false;\n    this.errorMessage = null;\n    // Nouvelles propriétés pour l'affectation automatique\n    this.showAutoAssignModal = false;\n    this.autoAssigningEmployee = null;\n    this.bestJobMatches = [];\n    this.loadingBestMatches = false;\n    this.autoAssignMessage = null;\n    this.viewMode = 'list';\n    this.employeeForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(3)]],\n      position: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      hire_date: ['', Validators.required],\n      phone: [''],\n      gender: [''],\n      location: [''],\n      notes: [''],\n      job_description_id: [''],\n      skills: this.formBuilder.array([]) // FormArray pour les compétences\n    });\n  }\n  ngOnInit() {\n    this.loadEmployees();\n    this.loadEmployeeSkills();\n    this.loadSkillsData();\n    this.loadJobDescriptions();\n  }\n  loadEmployees() {\n    this.loading = true;\n    this.errorMessage = null;\n    this.employeeService.getEmployees().subscribe({\n      next: employees => {\n        this.employees = employees;\n        this.loading = false;\n      },\n      error: err => {\n        console.error('Error loading employees:', err);\n        this.errorMessage = 'Erreur lors du chargement des employés. Veuillez réessayer plus tard.';\n        this.loading = false;\n      }\n    });\n  }\n  loadEmployeeSkills() {\n    this.loadingSkills = true;\n    this.skillService.getEmployeeSkills().subscribe({\n      next: employeeSkills => {\n        this.employeeSkills = employeeSkills;\n        this.loadingSkills = false;\n      },\n      error: err => {\n        console.error('Error loading employee skills:', err);\n        this.loadingSkills = false;\n      }\n    });\n  }\n  loadSkillsData() {\n    Promise.all([this.skillService.getSkills().toPromise(), this.skillService.getSkillLevels().toPromise()]).then(([skills, skillLevels]) => {\n      this.skills = skills || [];\n      this.skillLevels = skillLevels || [];\n    }).catch(err => {\n      console.error('Error loading skills data:', err);\n    });\n  }\n  loadJobDescriptions() {\n    this.loadingJobs = true;\n    this.jobDescriptionService.getJobDescriptions().subscribe({\n      next: jobDescriptions => {\n        this.jobDescriptions = jobDescriptions;\n        this.loadingJobs = false;\n      },\n      error: err => {\n        console.error('Error loading job descriptions:', err);\n        this.loadingJobs = false;\n      }\n    });\n  }\n  get skillsFormArray() {\n    return this.employeeForm.get('skills');\n  }\n  addSkill() {\n    const skillGroup = this.formBuilder.group({\n      skill_id: ['', Validators.required],\n      actual_skill_level_id: ['', Validators.required],\n      acquired_date: [''],\n      certification: [''],\n      last_evaluated_date: ['']\n    });\n    this.skillsFormArray.push(skillGroup);\n  }\n  removeSkill(index) {\n    this.skillsFormArray.removeAt(index);\n  }\n  switchView(mode) {\n    this.viewMode = mode;\n    if (mode === 'skills' && this.employeeSkills.length === 0) {\n      this.loadEmployeeSkills();\n    }\n  }\n  getEmployeeSkills(employeeId) {\n    return this.employeeSkills.filter(skill => skill.employee_id === employeeId);\n  }\n  getEmployeeName(employeeId) {\n    const employee = this.employees.find(emp => emp.id === employeeId);\n    return employee ? employee.name : `Employee ${employeeId}`;\n  }\n  onSubmit() {\n    if (this.employeeForm.valid) {\n      const formValue = this.employeeForm.value;\n      const employeeData = {\n        name: formValue.name,\n        position: formValue.position,\n        email: formValue.email,\n        hire_date: formValue.hire_date,\n        phone: formValue.phone || '',\n        gender: formValue.gender || '',\n        location: formValue.location || '',\n        notes: formValue.notes || '',\n        job_description_id: this.parseIntegerField(formValue.job_description_id) || undefined,\n        skills: formValue.skills.filter(skill => skill.skill_id && skill.actual_skill_level_id).map(skill => ({\n          skill_id: parseInt(skill.skill_id, 10),\n          actual_skill_level_id: parseInt(skill.actual_skill_level_id, 10),\n          acquired_date: skill.acquired_date || null,\n          certification: skill.certification || null,\n          last_evaluated_date: skill.last_evaluated_date || null\n        }))\n      };\n      console.log('Données employé à envoyer:', employeeData);\n      if (this.editingEmployee) {\n        this.employeeService.updateEmployee(this.editingEmployee.id, employeeData).subscribe({\n          next: updatedEmployee => {\n            const index = this.employees.findIndex(emp => emp.id === updatedEmployee.id);\n            if (index !== -1) {\n              this.employees[index] = updatedEmployee;\n            }\n            this.loadEmployeeSkills(); // Recharger les compétences\n            this.cancelEdit();\n            this.errorMessage = null;\n            console.log('✅ Employé mis à jour avec succès');\n          },\n          error: err => {\n            console.error('Error updating employee:', err);\n            this.errorMessage = `❌ Erreur mise à jour: ${err.error?.message || err.message}`;\n          }\n        });\n      } else {\n        this.employeeService.createEmployee(employeeData).subscribe({\n          next: newEmployee => {\n            this.employees.push(newEmployee);\n            this.loadEmployeeSkills(); // Recharger les compétences\n            this.cancelEdit();\n            this.errorMessage = null;\n            console.log('✅ Employé créé avec succès');\n          },\n          error: err => {\n            console.error('Error creating employee:', err);\n            this.errorMessage = `❌ Erreur création: ${err.error?.message || err.message}`;\n          }\n        });\n      }\n    } else {\n      console.log('❌ Formulaire invalide:', this.employeeForm.errors);\n      this.errorMessage = 'Veuillez remplir tous les champs obligatoires.';\n    }\n  }\n  editEmployee(employee) {\n    this.editingEmployee = employee;\n    this.showAddForm = false;\n    // Remplir les champs de base\n    this.employeeForm.patchValue({\n      name: employee.name,\n      position: employee.position,\n      email: employee.email,\n      hire_date: employee.hire_date,\n      phone: employee.phone || '',\n      gender: employee.gender || '',\n      location: employee.location || '',\n      notes: employee.notes || ''\n    });\n    // Vider et remplir les compétences\n    while (this.skillsFormArray.length !== 0) {\n      this.skillsFormArray.removeAt(0);\n    }\n    if (employee.skills && employee.skills.length > 0) {\n      employee.skills.forEach(empSkill => {\n        const skillGroup = this.formBuilder.group({\n          skill_id: [empSkill.skill_id || '', Validators.required],\n          actual_skill_level_id: [empSkill.actual_skill_level_id || '', Validators.required],\n          acquired_date: [empSkill.acquired_date || ''],\n          certification: [empSkill.certification || ''],\n          last_evaluated_date: [empSkill.last_evaluated_date || '']\n        });\n        this.skillsFormArray.push(skillGroup);\n      });\n    }\n  }\n  deleteEmployee(employee) {\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer ${employee.name} ?`)) {\n      this.employeeService.deleteEmployee(employee.id).subscribe({\n        next: () => {\n          this.employees = this.employees.filter(emp => emp.id !== employee.id);\n          this.errorMessage = null;\n        },\n        error: err => {\n          console.error('Error deleting employee:', err);\n          this.errorMessage = 'Erreur lors de la suppression de l\\'employé.';\n        }\n      });\n    }\n  }\n  cancelEdit() {\n    this.editingEmployee = null;\n    this.showAddForm = false;\n    this.employeeForm.reset();\n    // Vider le FormArray des compétences\n    while (this.skillsFormArray.length !== 0) {\n      this.skillsFormArray.removeAt(0);\n    }\n    this.errorMessage = null;\n  }\n  // Méthode pour voir tous les employés d'une fiche de poste\n  viewEmployeesOfJob(jobId) {\n    this.employeeService.getEmployeesByJobDescription(jobId).subscribe({\n      next: employees => {\n        console.log('Employés de cette fiche de poste:', employees);\n        // Vous pouvez afficher ces données dans un modal ou une nouvelle vue\n      },\n      error: err => {\n        console.error('Error loading employees of job:', err);\n        this.errorMessage = 'Erreur lors du chargement des employés de cette fiche de poste.';\n      }\n    });\n  }\n  // Méthode pour voir toutes les fiches d'un employé\n  viewJobsOfEmployee(employeeId) {\n    this.employeeService.getJobDescriptionsByEmployee(employeeId).subscribe({\n      next: jobs => {\n        console.log('Fiches de poste de cet employé:', jobs);\n        // Vous pouvez afficher ces données dans un modal ou une nouvelle vue\n      },\n      error: err => {\n        console.error('Error loading jobs of employee:', err);\n        this.errorMessage = 'Erreur lors du chargement des fiches de cet employé.';\n      }\n    });\n  }\n  parseIntegerField(value) {\n    if (!value || value === '' || value === 'null' || value === 'undefined') {\n      return null;\n    }\n    const parsed = parseInt(value, 10);\n    return isNaN(parsed) ? null : parsed;\n  }\n  editSkill(skill) {\n    // TODO: Implémenter l'édition de compétence\n    console.log('Edit skill:', skill);\n  }\n  deleteSkill(skill) {\n    this.skillService.deleteEmployeeSkill(skill.employee_id, skill.skill_id).subscribe({\n      next: () => {\n        this.loadEmployeeSkills();\n        // Optionnel: afficher un message de succès\n      },\n      error: err => {\n        console.error('Error deleting skill:', err);\n        this.errorMessage = 'Erreur lors de la suppression de la compétence.';\n      }\n    });\n  }\n  getSkillName(skillId) {\n    const skill = this.skills.find(s => s.id === skillId);\n    return skill ? skill.name : 'Compétence inconnue';\n  }\n  getSkillLevelName(levelId) {\n    const level = this.skillLevels.find(l => l.id === levelId);\n    return level ? level.level_name : 'Niveau inconnu';\n  }\n  getJobDescriptionName(jobId) {\n    const job = this.jobDescriptions.find(j => j.id === jobId);\n    return job ? `${job.emploi} - ${job.filiere_activite}` : 'Fiche inconnue';\n  }\n  // Nouvelle méthode pour trouver le meilleur poste pour un employé\n  findBestJobForEmployee(employee) {\n    this.autoAssigningEmployee = employee;\n    this.showAutoAssignModal = true;\n    this.loadingBestMatches = true;\n    this.autoAssignMessage = null;\n    this.bestJobMatches = [];\n    // Utiliser la méthode alternative car le backend n'a probablement pas l'endpoint spécifique\n    this.matchingService.findBestJobForEmployeeAlternative(employee.id, this.jobDescriptions).subscribe({\n      next: matches => {\n        this.bestJobMatches = matches.slice(0, 5); // Top 5 des meilleurs matches\n        this.loadingBestMatches = false;\n        if (this.bestJobMatches.length === 0) {\n          this.autoAssignMessage = 'Aucun poste compatible trouvé pour cet employé.';\n        }\n      },\n      error: err => {\n        console.error('Error finding best job matches:', err);\n        this.autoAssignMessage = 'Erreur lors de la recherche des postes compatibles.';\n        this.loadingBestMatches = false;\n      }\n    });\n  }\n  // Affecter l'employé au poste sélectionné\n  assignToBestJob(jobId, score) {\n    if (!this.autoAssigningEmployee) return;\n    const confirmMessage = `Voulez-vous affecter ${this.autoAssigningEmployee.name} à ce poste ?\\n\\nScore de compatibilité : ${score.toFixed(1)}%`;\n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n    this.employeeService.assignEmployeeToJobDescription(this.autoAssigningEmployee.id, jobId).subscribe({\n      next: () => {\n        // Mettre à jour l'employé localement\n        const index = this.employees.findIndex(emp => emp.id === this.autoAssigningEmployee.id);\n        if (index !== -1) {\n          this.employees[index].job_description_id = jobId;\n        }\n        this.autoAssignMessage = `✅ ${this.autoAssigningEmployee.name} a été affecté(e) avec succès !`;\n        this.bestJobMatches = [];\n        // Fermer le modal après 2 secondes\n        setTimeout(() => {\n          this.closeAutoAssignModal();\n        }, 2000);\n      },\n      error: err => {\n        console.error('Error assigning employee:', err);\n        this.autoAssignMessage = `❌ Erreur lors de l'affectation : ${err.error?.message || err.message}`;\n      }\n    });\n  }\n  // Fermer le modal d'affectation automatique\n  closeAutoAssignModal() {\n    this.showAutoAssignModal = false;\n    this.autoAssigningEmployee = null;\n    this.bestJobMatches = [];\n    this.autoAssignMessage = null;\n    this.loadingBestMatches = false;\n  }\n  // Obtenir le nom du poste à partir de l'ID\n  getJobNameFromId(jobId) {\n    const job = this.jobDescriptions.find(j => j.id === jobId);\n    return job ? job.emploi : 'Poste inconnu';\n  }\n  // Obtenir la filière du poste à partir de l'ID\n  getJobFiliereFromId(jobId) {\n    const job = this.jobDescriptions.find(j => j.id === jobId);\n    return job ? job.filiere_activite : 'Filière inconnue';\n  }\n};\nEmployeesComponent = __decorate([Component({\n  selector: 'app-employees',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterLink, EmployeeSkillComponent],\n  templateUrl: './employees.component.html',\n  styleUrls: ['./employees.component.css']\n})], EmployeesComponent);\nexport { EmployeesComponent };","map":{"version":3,"names":["Component","Validators","CommonModule","FormsModule","ReactiveFormsModule","RouterLink","EmployeeSkillComponent","EmployeesComponent","constructor","employeeService","skillService","jobDescriptionService","matchingService","formBuilder","employees","employeeSkills","jobDescriptions","skills","skillLevels","showAddForm","editingEmployee","showAssignJobForm","assigningEmployee","selectedJobId","loading","loadingSkills","loadingJobs","errorMessage","showAutoAssignModal","autoAssigningEmployee","bestJobMatches","loadingBestMatches","autoAssignMessage","viewMode","employeeForm","group","name","required","minLength","position","email","hire_date","phone","gender","location","notes","job_description_id","array","ngOnInit","loadEmployees","loadEmployeeSkills","loadSkillsData","loadJobDescriptions","getEmployees","subscribe","next","error","err","console","getEmployeeSkills","Promise","all","getSkills","toPromise","getSkillLevels","then","catch","getJobDescriptions","skillsFormArray","get","addSkill","skillGroup","skill_id","actual_skill_level_id","acquired_date","certification","last_evaluated_date","push","removeSkill","index","removeAt","switchView","mode","length","employeeId","filter","skill","employee_id","getEmployeeName","employee","find","emp","id","onSubmit","valid","formValue","value","employeeData","parseIntegerField","undefined","map","parseInt","log","updateEmployee","updatedEmployee","findIndex","cancelEdit","message","createEmployee","newEmployee","errors","editEmployee","patchValue","forEach","empSkill","deleteEmployee","window","confirm","reset","viewEmployeesOfJob","jobId","getEmployeesByJobDescription","viewJobsOfEmployee","getJobDescriptionsByEmployee","jobs","parsed","isNaN","editSkill","deleteSkill","deleteEmployeeSkill","getSkillName","skillId","s","getSkillLevelName","levelId","level","l","level_name","getJobDescriptionName","job","j","emploi","filiere_activite","findBestJobForEmployee","findBestJobForEmployeeAlternative","matches","slice","assignToBestJob","score","confirmMessage","toFixed","assignEmployeeToJobDescription","setTimeout","closeAutoAssignModal","getJobNameFromId","getJobFiliereFromId","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\employees\\employees.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nimport { EmployeeService } from '../../services/employee.service';\nimport { SkillService } from '../../services/skill.service';\nimport { JobDescriptionService } from '../../services/job-description.service';\nimport { MatchingService } from '../../services/matching.service';\nimport { Employee, Skill, SkillLevel } from '../../models/employee.model';\nimport { JobDescription } from '../../models/job-description.model';\nimport { MatchingResult } from '../../models/matching.model';\nimport { EmployeeSkillComponent } from '../../components/employee-skill/employee-skill.component';\n\n@Component({\n  selector: 'app-employees',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterLink, EmployeeSkillComponent],\n  templateUrl: './employees.component.html',\n  styleUrls: ['./employees.component.css']\n})\nexport class EmployeesComponent implements OnInit {\n  employees: Employee[] = [];\n  employeeSkills: any[] = [];\n  employeeForm: FormGroup;\n  jobDescriptions: JobDescription[] = [];\n  skills: Skill[] = [];\n  skillLevels: SkillLevel[] = [];\n  showAddForm: boolean = false;\n  editingEmployee: Employee | null = null;\n  showAssignJobForm: boolean = false;\n  assigningEmployee: Employee | null = null;\n  selectedJobId: number | null = null;\n  loading: boolean = false;\n  loadingSkills: boolean = false;\n  loadingJobs: boolean = false;\n  errorMessage: string | null = null;\n  \n  // Nouvelles propriétés pour l'affectation automatique\n  showAutoAssignModal: boolean = false;\n  autoAssigningEmployee: Employee | null = null;\n  bestJobMatches: MatchingResult[] = [];\n  loadingBestMatches: boolean = false;\n  autoAssignMessage: string | null = null;\n  viewMode: 'list' | 'skills' = 'list';\n\n  constructor(\n    private employeeService: EmployeeService,\n    private skillService: SkillService,\n    private jobDescriptionService: JobDescriptionService,\n    private matchingService: MatchingService,\n    private formBuilder: FormBuilder\n  ) {\n    this.employeeForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(3)]],\n      position: ['', [Validators.required, Validators.minLength(3)]],\n      email: ['', [Validators.required, Validators.email]],\n      hire_date: ['', Validators.required],\n      phone: [''],\n      gender: [''],\n      location: [''],\n      notes: [''],\n      job_description_id: [''],\n      skills: this.formBuilder.array([]) // FormArray pour les compétences\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadEmployees();\n    this.loadEmployeeSkills();\n    this.loadSkillsData();\n    this.loadJobDescriptions();\n  }\n\n  loadEmployees(): void {\n    this.loading = true;\n    this.errorMessage = null;\n    this.employeeService.getEmployees().subscribe({\n      next: (employees) => {\n        this.employees = employees;\n        this.loading = false;\n      },\n      error: (err) => {\n        console.error('Error loading employees:', err);\n        this.errorMessage = 'Erreur lors du chargement des employés. Veuillez réessayer plus tard.';\n        this.loading = false;\n      }\n    });\n  }\n\n  loadEmployeeSkills(): void {\n    this.loadingSkills = true;\n    this.skillService.getEmployeeSkills().subscribe({\n      next: (employeeSkills) => {\n        this.employeeSkills = employeeSkills;\n        this.loadingSkills = false;\n      },\n      error: (err) => {\n        console.error('Error loading employee skills:', err);\n        this.loadingSkills = false;\n      }\n    });\n  }\n\n  loadSkillsData(): void {\n    Promise.all([\n      this.skillService.getSkills().toPromise(),\n      this.skillService.getSkillLevels().toPromise()\n    ]).then(([skills, skillLevels]) => {\n      this.skills = skills || [];\n      this.skillLevels = skillLevels || [];\n    }).catch(err => {\n      console.error('Error loading skills data:', err);\n    });\n  }\n\n  loadJobDescriptions(): void {\n    this.loadingJobs = true;\n    this.jobDescriptionService.getJobDescriptions().subscribe({\n      next: (jobDescriptions) => {\n        this.jobDescriptions = jobDescriptions;\n        this.loadingJobs = false;\n      },\n      error: (err) => {\n        console.error('Error loading job descriptions:', err);\n        this.loadingJobs = false;\n      }\n    });\n  }\n\n  get skillsFormArray(): FormArray {\n    return this.employeeForm.get('skills') as FormArray;\n  }\n\n  addSkill(): void {\n    const skillGroup = this.formBuilder.group({\n      skill_id: ['', Validators.required],\n      actual_skill_level_id: ['', Validators.required],\n      acquired_date: [''],\n      certification: [''],\n      last_evaluated_date: ['']\n    });\n    this.skillsFormArray.push(skillGroup);\n  }\n\n  removeSkill(index: number): void {\n    this.skillsFormArray.removeAt(index);\n  }\n  switchView(mode: 'list' | 'skills'): void {\n    this.viewMode = mode;\n    if (mode === 'skills' && this.employeeSkills.length === 0) {\n      this.loadEmployeeSkills();\n    }\n  }\n\n  getEmployeeSkills(employeeId: number): any[] {\n    return this.employeeSkills.filter(skill => skill.employee_id === employeeId);\n  }\n\n  getEmployeeName(employeeId: number): string {\n    const employee = this.employees.find(emp => emp.id === employeeId);\n    return employee ? employee.name : `Employee ${employeeId}`;\n  }\n  onSubmit(): void {\n    if (this.employeeForm.valid) {\n      const formValue = this.employeeForm.value;\n      \n      const employeeData = {\n        name: formValue.name,\n        position: formValue.position,\n        email: formValue.email,\n        hire_date: formValue.hire_date,\n        phone: formValue.phone || '',\n        gender: formValue.gender || '',\n        location: formValue.location || '',\n        notes: formValue.notes || '',\n        job_description_id: this.parseIntegerField(formValue.job_description_id) || undefined,\n        skills: formValue.skills\n          .filter((skill: any) => skill.skill_id && skill.actual_skill_level_id)\n          .map((skill: any) => ({\n            skill_id: parseInt(skill.skill_id, 10),\n            actual_skill_level_id: parseInt(skill.actual_skill_level_id, 10),\n            acquired_date: skill.acquired_date || null,\n            certification: skill.certification || null,\n            last_evaluated_date: skill.last_evaluated_date || null\n          }))\n      } as Employee;\n      \n      console.log('Données employé à envoyer:', employeeData);\n      \n      if (this.editingEmployee) {\n        this.employeeService.updateEmployee(this.editingEmployee.id!, employeeData).subscribe({\n          next: (updatedEmployee) => {\n            const index = this.employees.findIndex(emp => emp.id === updatedEmployee.id);\n            if (index !== -1) {\n              this.employees[index] = updatedEmployee;\n            }\n            this.loadEmployeeSkills(); // Recharger les compétences\n            this.cancelEdit();\n            this.errorMessage = null;\n            console.log('✅ Employé mis à jour avec succès');\n          },\n          error: (err) => {\n            console.error('Error updating employee:', err);\n            this.errorMessage = `❌ Erreur mise à jour: ${err.error?.message || err.message}`;\n          }\n        });\n      } else {\n        this.employeeService.createEmployee(employeeData).subscribe({\n          next: (newEmployee) => {\n            this.employees.push(newEmployee);\n            this.loadEmployeeSkills(); // Recharger les compétences\n            this.cancelEdit();\n            this.errorMessage = null;\n            console.log('✅ Employé créé avec succès');\n          },\n          error: (err) => {\n            console.error('Error creating employee:', err);\n            this.errorMessage = `❌ Erreur création: ${err.error?.message || err.message}`;\n          }\n        });\n      }\n    } else {\n      console.log('❌ Formulaire invalide:', this.employeeForm.errors);\n      this.errorMessage = 'Veuillez remplir tous les champs obligatoires.';\n    }\n  }\n\n  editEmployee(employee: Employee): void {\n    this.editingEmployee = employee;\n    this.showAddForm = false;\n    \n    // Remplir les champs de base\n    this.employeeForm.patchValue({\n      name: employee.name,\n      position: employee.position,\n      email: employee.email,\n      hire_date: employee.hire_date,\n      phone: employee.phone || '',\n      gender: employee.gender || '',\n      location: employee.location || '',\n      notes: employee.notes || '',\n      \n    });\n\n    // Vider et remplir les compétences\n    while (this.skillsFormArray.length !== 0) {\n      this.skillsFormArray.removeAt(0);\n    }\n    \n    if (employee.skills && employee.skills.length > 0) {\n      employee.skills.forEach(empSkill => {\n        const skillGroup = this.formBuilder.group({\n          skill_id: [empSkill.skill_id || '', Validators.required],\n          actual_skill_level_id: [empSkill.actual_skill_level_id || '', Validators.required],\n          acquired_date: [empSkill.acquired_date || ''],\n          certification: [empSkill.certification || ''],\n          last_evaluated_date: [empSkill.last_evaluated_date || '']\n        });\n        this.skillsFormArray.push(skillGroup);\n      });\n    }\n  }\n\n  deleteEmployee(employee: Employee): void {\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer ${employee.name} ?`)) {\n      this.employeeService.deleteEmployee(employee.id!).subscribe({\n        next: () => {\n          this.employees = this.employees.filter(emp => emp.id !== employee.id);\n          this.errorMessage = null;\n        },\n        error: (err) => {\n          console.error('Error deleting employee:', err);\n          this.errorMessage = 'Erreur lors de la suppression de l\\'employé.';\n        }\n      });\n    }\n  }\n\n  cancelEdit(): void {\n    this.editingEmployee = null;\n    this.showAddForm = false;\n    this.employeeForm.reset();\n    \n    // Vider le FormArray des compétences\n    while (this.skillsFormArray.length !== 0) {\n      this.skillsFormArray.removeAt(0);\n    }\n    \n    this.errorMessage = null;\n  }\n\n \n\n\n\n\n\n\n    \n\n  // Méthode pour voir tous les employés d'une fiche de poste\n  viewEmployeesOfJob(jobId: number): void {\n    this.employeeService.getEmployeesByJobDescription(jobId).subscribe({\n      next: (employees) => {\n        console.log('Employés de cette fiche de poste:', employees);\n        // Vous pouvez afficher ces données dans un modal ou une nouvelle vue\n      },\n      error: (err) => {\n        console.error('Error loading employees of job:', err);\n        this.errorMessage = 'Erreur lors du chargement des employés de cette fiche de poste.';\n      }\n    });\n  }\n\n  // Méthode pour voir toutes les fiches d'un employé\n  viewJobsOfEmployee(employeeId: number): void {\n    this.employeeService.getJobDescriptionsByEmployee(employeeId).subscribe({\n      next: (jobs) => {\n        console.log('Fiches de poste de cet employé:', jobs);\n        // Vous pouvez afficher ces données dans un modal ou une nouvelle vue\n      },\n      error: (err) => {\n        console.error('Error loading jobs of employee:', err);\n        this.errorMessage = 'Erreur lors du chargement des fiches de cet employé.';\n      }\n    });\n  }\n\n  private parseIntegerField(value: any): number | null {\n    if (!value || value === '' || value === 'null' || value === 'undefined') {\n      return null;\n    }\n    const parsed = parseInt(value, 10);\n    return isNaN(parsed) ? null : parsed;\n  }\n\n  editSkill(skill: any): void {\n    // TODO: Implémenter l'édition de compétence\n    console.log('Edit skill:', skill);\n  }\n\n  deleteSkill(skill: any): void {\n    this.skillService.deleteEmployeeSkill(skill.employee_id, skill.skill_id).subscribe({\n      next: () => {\n        this.loadEmployeeSkills();\n        // Optionnel: afficher un message de succès\n      },\n      error: (err) => {\n        console.error('Error deleting skill:', err);\n        this.errorMessage = 'Erreur lors de la suppression de la compétence.';\n      }\n    });\n  }\n\n  getSkillName(skillId: number): string {\n    const skill = this.skills.find(s => s.id === skillId);\n    return skill ? skill.name : 'Compétence inconnue';\n  }\n\n  getSkillLevelName(levelId: number): string {\n    const level = this.skillLevels.find(l => l.id === levelId);\n    return level ? level.level_name : 'Niveau inconnu';\n  }\n\n  getJobDescriptionName(jobId: number): string {\n    const job = this.jobDescriptions.find(j => j.id === jobId);\n    return job ? `${job.emploi} - ${job.filiere_activite}` : 'Fiche inconnue';\n  }\n\n  // Nouvelle méthode pour trouver le meilleur poste pour un employé\n  findBestJobForEmployee(employee: Employee): void {\n    this.autoAssigningEmployee = employee;\n    this.showAutoAssignModal = true;\n    this.loadingBestMatches = true;\n    this.autoAssignMessage = null;\n    this.bestJobMatches = [];\n\n    // Utiliser la méthode alternative car le backend n'a probablement pas l'endpoint spécifique\n    this.matchingService.findBestJobForEmployeeAlternative(employee.id!, this.jobDescriptions)\n      .subscribe({\n        next: (matches) => {\n          this.bestJobMatches = matches.slice(0, 5); // Top 5 des meilleurs matches\n          this.loadingBestMatches = false;\n          \n          if (this.bestJobMatches.length === 0) {\n            this.autoAssignMessage = 'Aucun poste compatible trouvé pour cet employé.';\n          }\n        },\n        error: (err) => {\n          console.error('Error finding best job matches:', err);\n          this.autoAssignMessage = 'Erreur lors de la recherche des postes compatibles.';\n          this.loadingBestMatches = false;\n        }\n      });\n  }\n\n  // Affecter l'employé au poste sélectionné\n  assignToBestJob(jobId: number, score: number): void {\n    if (!this.autoAssigningEmployee) return;\n\n    const confirmMessage = `Voulez-vous affecter ${this.autoAssigningEmployee.name} à ce poste ?\\n\\nScore de compatibilité : ${score.toFixed(1)}%`;\n    \n    if (!window.confirm(confirmMessage)) {\n      return;\n    }\n\n    this.employeeService.assignEmployeeToJobDescription(this.autoAssigningEmployee.id!, jobId)\n      .subscribe({\n        next: () => {\n          // Mettre à jour l'employé localement\n          const index = this.employees.findIndex(emp => emp.id === this.autoAssigningEmployee!.id);\n          if (index !== -1) {\n            this.employees[index].job_description_id = jobId;\n          }\n          \n          this.autoAssignMessage = `✅ ${this.autoAssigningEmployee!.name} a été affecté(e) avec succès !`;\n          this.bestJobMatches = [];\n          \n          // Fermer le modal après 2 secondes\n          setTimeout(() => {\n            this.closeAutoAssignModal();\n          }, 2000);\n        },\n        error: (err) => {\n          console.error('Error assigning employee:', err);\n          this.autoAssignMessage = `❌ Erreur lors de l'affectation : ${err.error?.message || err.message}`;\n        }\n      });\n  }\n\n  // Fermer le modal d'affectation automatique\n  closeAutoAssignModal(): void {\n    this.showAutoAssignModal = false;\n    this.autoAssigningEmployee = null;\n    this.bestJobMatches = [];\n    this.autoAssignMessage = null;\n    this.loadingBestMatches = false;\n  }\n\n  // Obtenir le nom du poste à partir de l'ID\n  getJobNameFromId(jobId: number): string {\n    const job = this.jobDescriptions.find(j => j.id === jobId);\n    return job ? job.emploi : 'Poste inconnu';\n  }\n\n  // Obtenir la filière du poste à partir de l'ID\n  getJobFiliereFromId(jobId: number): string {\n    const job = this.jobDescriptions.find(j => j.id === jobId);\n    return job ? job.filiere_activite : 'Filière inconnue';\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}