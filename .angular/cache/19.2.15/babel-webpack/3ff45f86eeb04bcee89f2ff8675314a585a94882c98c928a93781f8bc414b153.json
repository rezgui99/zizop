{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nlet OrganigrammeComponent = class OrganigrammeComponent {\n  constructor(employeeService, jobDescriptionService) {\n    this.employeeService = employeeService;\n    this.jobDescriptionService = jobDescriptionService;\n    this.employees = [];\n    this.jobDescriptions = [];\n    this.loading = true;\n    this.errorMessage = null;\n  }\n  ngOnInit() {\n    this.loadData();\n  }\n  loadData() {\n    this.loading = true;\n    this.errorMessage = null;\n    Promise.all([this.employeeService.getEmployees().toPromise(), this.jobDescriptionService.getJobDescriptions().toPromise()]).then(([employees, jobDescriptions]) => {\n      this.employees = employees || [];\n      this.jobDescriptions = jobDescriptions || [];\n      this.loading = false;\n    }).catch(err => {\n      console.error('Error loading organizational data:', err);\n      this.errorMessage = 'Erreur lors du chargement des données organisationnelles.';\n      this.loading = false;\n    });\n  }\n  getEmployeesForJob(jobId) {\n    return this.employees.filter(emp => emp.job_description_id === jobId);\n  }\n  getJobDescription(jobId) {\n    return this.jobDescriptions.find(job => job.id === jobId);\n  }\n  getSuperieurName(superieurId) {\n    const job = this.jobDescriptions.find(j => j.id === superieurId);\n    return job ? job.emploi : `Job ${superieurId}`;\n  }\n};\nOrganigrammeComponent = __decorate([Component({\n  selector: 'app-organigramme',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './organigramme.component.html',\n  styleUrls: ['./organigramme.component.css']\n})], OrganigrammeComponent);\nexport { OrganigrammeComponent };","map":{"version":3,"names":["Component","CommonModule","RouterLink","OrganigrammeComponent","constructor","employeeService","jobDescriptionService","employees","jobDescriptions","loading","errorMessage","ngOnInit","loadData","Promise","all","getEmployees","toPromise","getJobDescriptions","then","catch","err","console","error","getEmployeesForJob","jobId","filter","emp","job_description_id","getJobDescription","find","job","id","getSuperieurName","superieurId","j","emploi","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\organigramme\\organigramme.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterLink } from '@angular/router';\nimport { EmployeeService } from '../../services/employee.service';\nimport { JobDescriptionService } from '../../services/job-description.service';\nimport { Employee } from '../../models/employee.model';\nimport { JobDescription } from '../../models/job-description.model';\n\n@Component({\n  selector: 'app-organigramme',\n  standalone: true,\n  imports: [CommonModule, RouterLink],\n  templateUrl: './organigramme.component.html',\n  styleUrls: ['./organigramme.component.css']\n})\nexport class OrganigrammeComponent implements OnInit {\n  employees: Employee[] = [];\n  jobDescriptions: JobDescription[] = [];\n  loading: boolean = true;\n  errorMessage: string | null = null;\n\n  constructor(\n    private employeeService: EmployeeService,\n    private jobDescriptionService: JobDescriptionService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadData();\n  }\n\n  loadData(): void {\n    this.loading = true;\n    this.errorMessage = null;\n\n    Promise.all([\n      this.employeeService.getEmployees().toPromise(),\n      this.jobDescriptionService.getJobDescriptions().toPromise()\n    ]).then(([employees, jobDescriptions]) => {\n      this.employees = employees || [];\n      this.jobDescriptions = jobDescriptions || [];\n      this.loading = false;\n    }).catch(err => {\n      console.error('Error loading organizational data:', err);\n      this.errorMessage = 'Erreur lors du chargement des données organisationnelles.';\n      this.loading = false;\n    });\n  }\n\n  getEmployeesForJob(jobId: number): Employee[] {\n    return this.employees.filter(emp => emp.job_description_id === jobId);\n  }\n\n  getJobDescription(jobId: number): JobDescription | undefined {\n    return this.jobDescriptions.find(job => job.id === jobId);\n  }\n\n  getSuperieurName(superieurId: number): string {\n    const job = this.jobDescriptions.find(j => j.id === superieurId);\n    return job ? job.emploi : `Job ${superieurId}`;\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,UAAU,QAAQ,iBAAiB;AAarC,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAMhCC,YACUC,eAAgC,EAChCC,qBAA4C;IAD5C,KAAAD,eAAe,GAAfA,eAAe;IACf,KAAAC,qBAAqB,GAArBA,qBAAqB;IAP/B,KAAAC,SAAS,GAAe,EAAE;IAC1B,KAAAC,eAAe,GAAqB,EAAE;IACtC,KAAAC,OAAO,GAAY,IAAI;IACvB,KAAAC,YAAY,GAAkB,IAAI;EAK9B;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACH,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,YAAY,GAAG,IAAI;IAExBG,OAAO,CAACC,GAAG,CAAC,CACV,IAAI,CAACT,eAAe,CAACU,YAAY,EAAE,CAACC,SAAS,EAAE,EAC/C,IAAI,CAACV,qBAAqB,CAACW,kBAAkB,EAAE,CAACD,SAAS,EAAE,CAC5D,CAAC,CAACE,IAAI,CAAC,CAAC,CAACX,SAAS,EAAEC,eAAe,CAAC,KAAI;MACvC,IAAI,CAACD,SAAS,GAAGA,SAAS,IAAI,EAAE;MAChC,IAAI,CAACC,eAAe,GAAGA,eAAe,IAAI,EAAE;MAC5C,IAAI,CAACC,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC,CAACU,KAAK,CAACC,GAAG,IAAG;MACbC,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEF,GAAG,CAAC;MACxD,IAAI,CAACV,YAAY,GAAG,2DAA2D;MAC/E,IAAI,CAACD,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC;EACJ;EAEAc,kBAAkBA,CAACC,KAAa;IAC9B,OAAO,IAAI,CAACjB,SAAS,CAACkB,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,kBAAkB,KAAKH,KAAK,CAAC;EACvE;EAEAI,iBAAiBA,CAACJ,KAAa;IAC7B,OAAO,IAAI,CAAChB,eAAe,CAACqB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKP,KAAK,CAAC;EAC3D;EAEAQ,gBAAgBA,CAACC,WAAmB;IAClC,MAAMH,GAAG,GAAG,IAAI,CAACtB,eAAe,CAACqB,IAAI,CAACK,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKE,WAAW,CAAC;IAChE,OAAOH,GAAG,GAAGA,GAAG,CAACK,MAAM,GAAG,OAAOF,WAAW,EAAE;EAChD;CACD;AA7CY9B,qBAAqB,GAAAiC,UAAA,EAPjCpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,kBAAkB;EAC5BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACtC,YAAY,EAAEC,UAAU,CAAC;EACnCsC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACWtC,qBAAqB,CA6CjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}