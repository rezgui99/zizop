{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { RouterLink } from '@angular/router';\nlet JobDescriptionsComponent = class JobDescriptionsComponent {\n  constructor(jobDescriptionService, skillService, formBuilder, router) {\n    this.jobDescriptionService = jobDescriptionService;\n    this.skillService = skillService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.jobDescriptions = [];\n    this.filteredJobDescriptions = [];\n    this.showAddForm = false;\n    this.editingJobDescription = null;\n    this.loading = false;\n    this.errorMessage = null;\n    this.searchQuery = '';\n    this.selectedFiliere = '';\n    this.selectedFamille = '';\n    // Data for dropdowns\n    this.skills = [];\n    this.skillLevels = [];\n    // Filter options\n    this.filiereOptions = [];\n    this.familleOptions = [];\n    this.jobDescriptionForm = this.formBuilder.group({\n      emploi: ['', [Validators.required, Validators.minLength(3)]],\n      filiere_activite: ['', Validators.required],\n      famille: ['', Validators.required],\n      superieur_n1: [''],\n      superieur_n2: [''],\n      superieur_n1: [''],\n      superieur_n2: [''],\n      superieur_n1: [''],\n      superieur_n2: [''],\n      finalite: [''],\n      niveau_exigence: [''],\n      niveau_exp: [''],\n      status: ['Actif'],\n      version: ['1.0'],\n      missions: this.formBuilder.array([]),\n      moyens: this.formBuilder.array([]),\n      airesProximites: this.formBuilder.array([]),\n      requiredSkills: this.formBuilder.array([])\n    });\n  }\n  ngOnInit() {\n    this.loadJobDescriptions();\n    this.loadSkillsData();\n  }\n  // FormArray getters\n  get missionsArray() {\n    return this.jobDescriptionForm.get('missions');\n  }\n  get moyensArray() {\n    return this.jobDescriptionForm.get('moyens');\n  }\n  get airesProximiteArray() {\n    return this.jobDescriptionForm.get('airesProximites');\n  }\n  get requiredSkillsArray() {\n    return this.jobDescriptionForm.get('requiredSkills');\n  }\n  loadJobDescriptions() {\n    this.loading = true;\n    this.errorMessage = null;\n    this.jobDescriptionService.getJobDescriptions().subscribe({\n      next: jobDescriptions => {\n        this.jobDescriptions = jobDescriptions;\n        this.filteredJobDescriptions = [...jobDescriptions];\n        this.extractFilterOptions();\n        this.loading = false;\n      },\n      error: err => {\n        console.error('Error loading job descriptions:', err);\n        this.errorMessage = 'Erreur lors du chargement des fiches de poste.';\n        this.loading = false;\n      }\n    });\n  }\n  loadSkillsData() {\n    Promise.all([this.skillService.getSkills().toPromise(), this.skillService.getSkillLevels().toPromise()]).then(([skills, skillLevels]) => {\n      this.skills = skills || [];\n      this.skillLevels = skillLevels || [];\n    }).catch(err => {\n      console.error('Error loading skills data:', err);\n    });\n  }\n  extractFilterOptions() {\n    const filieres = new Set();\n    const familles = new Set();\n    this.jobDescriptions.forEach(job => {\n      if (job.filiere_activite) filieres.add(job.filiere_activite);\n      if (job.famille) familles.add(job.famille);\n    });\n    this.filiereOptions = Array.from(filieres).sort();\n    this.familleOptions = Array.from(familles).sort();\n  }\n  // Mission methods\n  addMission() {\n    const missionGroup = this.formBuilder.group({\n      name: ['', Validators.required]\n    });\n    this.missionsArray.push(missionGroup);\n  }\n  removeMission(index) {\n    this.missionsArray.removeAt(index);\n  }\n  // Moyen methods\n  addMoyen() {\n    const moyenGroup = this.formBuilder.group({\n      name: ['', Validators.required]\n    });\n    this.moyensArray.push(moyenGroup);\n  }\n  removeMoyen(index) {\n    this.moyensArray.removeAt(index);\n  }\n  // Aire de proximité methods\n  addAireProximite() {\n    const aireGroup = this.formBuilder.group({\n      name: ['', Validators.required],\n      nombre: [1, [Validators.required, Validators.min(1)]]\n    });\n    this.airesProximiteArray.push(aireGroup);\n  }\n  removeAireProximite(index) {\n    this.airesProximiteArray.removeAt(index);\n  }\n  // Required skills methods\n  addRequiredSkill() {\n    const skillGroup = this.formBuilder.group({\n      skill_id: ['', Validators.required],\n      required_skill_level_id: ['', Validators.required]\n    });\n    this.requiredSkillsArray.push(skillGroup);\n  }\n  removeRequiredSkill(index) {\n    this.requiredSkillsArray.removeAt(index);\n  }\n  getSuperieurName(superieurId) {\n    const superieur = this.jobDescriptions.find(job => job.id === superieurId);\n    return superieur ? `${superieur.emploi}` : `ID: ${superieurId}`;\n  }\n  applyFilters() {\n    this.filteredJobDescriptions = this.jobDescriptions.filter(job => {\n      const matchesSearch = !this.searchQuery || job.emploi.toLowerCase().includes(this.searchQuery.toLowerCase()) || job.filiere_activite.toLowerCase().includes(this.searchQuery.toLowerCase()) || job.famille.toLowerCase().includes(this.searchQuery.toLowerCase());\n      const matchesFiliere = !this.selectedFiliere || job.filiere_activite === this.selectedFiliere;\n      const matchesFamille = !this.selectedFamille || job.famille === this.selectedFamille;\n      return matchesSearch && matchesFiliere && matchesFamille;\n    });\n  }\n  onSearchChange() {\n    this.applyFilters();\n  }\n  onFilterChange() {\n    this.applyFilters();\n  }\n  clearFilters() {\n    this.searchQuery = '';\n    this.selectedFiliere = '';\n    this.selectedFamille = '';\n    this.filteredJobDescriptions = [...this.jobDescriptions];\n  }\n  onSubmit() {\n    if (this.jobDescriptionForm.valid) {\n      const formValue = this.jobDescriptionForm.value;\n      // Préparer les données exactement comme dans votre JSON\n      const jobDescriptionData = {\n        emploi: formValue.emploi?.trim() || '',\n        filiere_activite: formValue.filiere_activite?.trim() || '',\n        famille: formValue.famille?.trim() || '',\n        superieur_n1: this.parseIntegerField(formValue.superieur_n1),\n        superieur_n2: this.parseIntegerField(formValue.superieur_n2),\n        superieur_n1: this.parseIntegerField(formValue.superieur_n1),\n        superieur_n2: this.parseIntegerField(formValue.superieur_n2),\n        finalite: formValue.finalite?.trim() || '',\n        niveau_exigence: formValue.niveau_exigence || '',\n        niveau_exp: formValue.niveau_exp || '',\n        status: formValue.status || 'Actif',\n        version: formValue.version || '1.0',\n        missions: formValue.missions || [],\n        moyens: formValue.moyens || [],\n        airesProximites: formValue.airesProximites || [],\n        requiredSkills: formValue.requiredSkills.map(skill => ({\n          skill_id: parseInt(skill.skill_id, 10),\n          required_skill_level_id: parseInt(skill.required_skill_level_id, 10)\n        })) || []\n      };\n      console.log('Données à envoyer:', JSON.stringify(jobDescriptionData, null, 2));\n      if (this.editingJobDescription) {\n        this.jobDescriptionService.updateJobDescription(this.editingJobDescription.id, jobDescriptionData).subscribe({\n          next: updatedJobDescription => {\n            const index = this.jobDescriptions.findIndex(job => job.id === updatedJobDescription.id);\n            if (index !== -1) {\n              this.jobDescriptions[index] = updatedJobDescription;\n            }\n            this.applyFilters();\n            this.cancelEdit();\n            this.errorMessage = null;\n          },\n          error: err => {\n            console.error('Error updating job description:', err);\n            this.errorMessage = `Erreur lors de la mise à jour: ${err.error?.message || err.message}`;\n          }\n        });\n      } else {\n        this.jobDescriptionService.createJobDescription(jobDescriptionData).subscribe({\n          next: newJobDescription => {\n            this.jobDescriptions.push(newJobDescription);\n            this.applyFilters();\n            this.extractFilterOptions();\n            this.cancelEdit();\n            this.errorMessage = null;\n          },\n          error: err => {\n            console.error('Error creating job description:', err);\n            this.errorMessage = `Erreur lors de la création: ${err.error?.message || err.message}`;\n          }\n        });\n      }\n    }\n  }\n  parseIntegerField(value) {\n    if (!value || value === '' || value === 'null' || value === 'undefined') {\n      return null;\n    }\n    const parsed = parseInt(value, 10);\n    return isNaN(parsed) ? null : parsed;\n  }\n  editJobDescription(jobDescription) {\n    this.editingJobDescription = jobDescription;\n    this.showAddForm = false;\n    // Remplir le formulaire avec les données existantes\n    this.jobDescriptionForm.patchValue({\n      emploi: jobDescription.emploi,\n      filiere_activite: jobDescription.filiere_activite,\n      famille: jobDescription.famille,\n      superieur_n1: jobDescription.superieur_n1 || '',\n      superieur_n2: jobDescription.superieur_n2 || '',\n      superieur_n1: jobDescription.superieur_n1 || '',\n      superieur_n2: jobDescription.superieur_n2 || '',\n      finalite: jobDescription.finalite || '',\n      niveau_exigence: jobDescription.niveau_exigence || '',\n      niveau_exp: jobDescription.niveau_exp || '',\n      status: jobDescription.status || 'Actif',\n      version: jobDescription.version || '1.0'\n    });\n    // Remplir les arrays\n    this.populateFormArrays(jobDescription);\n  }\n  populateFormArrays(jobDescription) {\n    // Clear existing arrays\n    while (this.missionsArray.length !== 0) {\n      this.missionsArray.removeAt(0);\n    }\n    while (this.moyensArray.length !== 0) {\n      this.moyensArray.removeAt(0);\n    }\n    while (this.airesProximiteArray.length !== 0) {\n      this.airesProximiteArray.removeAt(0);\n    }\n    while (this.requiredSkillsArray.length !== 0) {\n      this.requiredSkillsArray.removeAt(0);\n    }\n    // Populate missions\n    if (jobDescription.missions) {\n      jobDescription.missions.forEach(mission => {\n        const missionGroup = this.formBuilder.group({\n          name: [mission.mission || '', Validators.required]\n        });\n        this.missionsArray.push(missionGroup);\n      });\n    }\n    // Populate moyens\n    if (jobDescription.moyens) {\n      jobDescription.moyens.forEach(moyen => {\n        const moyenGroup = this.formBuilder.group({\n          name: [moyen.moyen || '', Validators.required]\n        });\n        this.moyensArray.push(moyenGroup);\n      });\n    }\n    // Populate aires de proximité\n    if (jobDescription.airesProximites) {\n      jobDescription.airesProximites.forEach(aire => {\n        const aireGroup = this.formBuilder.group({\n          name: [aire.poste || '', Validators.required],\n          nombre: [aire.nombre || 1, [Validators.required, Validators.min(1)]]\n        });\n        this.airesProximiteArray.push(aireGroup);\n      });\n    }\n    // Populate required skills\n    if (jobDescription.requiredSkills) {\n      jobDescription.requiredSkills.forEach(skill => {\n        const skillGroup = this.formBuilder.group({\n          skill_id: [skill.skill_id || '', Validators.required],\n          required_skill_level_id: [skill.required_skill_level_id || '', Validators.required]\n        });\n        this.requiredSkillsArray.push(skillGroup);\n      });\n    }\n  }\n  deleteJobDescription(jobDescription) {\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer la fiche \"${jobDescription.emploi}\" ?`)) {\n      this.jobDescriptionService.deleteJobDescription(jobDescription.id).subscribe({\n        next: () => {\n          this.jobDescriptions = this.jobDescriptions.filter(job => job.id !== jobDescription.id);\n          this.applyFilters();\n          this.extractFilterOptions();\n          this.errorMessage = null;\n        },\n        error: err => {\n          console.error('Error deleting job description:', err);\n          this.errorMessage = 'Erreur lors de la suppression de la fiche de poste.';\n        }\n      });\n    }\n  }\n  cancelEdit() {\n    this.editingJobDescription = null;\n    this.showAddForm = false;\n    this.jobDescriptionForm.reset({\n      superieur_n1: '',\n      superieur_n2: '',\n      status: 'Actif',\n      version: '1.0'\n    });\n    // Clear all form arrays\n    while (this.missionsArray.length !== 0) {\n      this.missionsArray.removeAt(0);\n    }\n    while (this.moyensArray.length !== 0) {\n      this.moyensArray.removeAt(0);\n    }\n    while (this.airesProximiteArray.length !== 0) {\n      this.airesProximiteArray.removeAt(0);\n    }\n    while (this.requiredSkillsArray.length !== 0) {\n      this.requiredSkillsArray.removeAt(0);\n    }\n  }\n  getSkillName(skillId) {\n    const skill = this.skills.find(s => s.id === skillId);\n    return skill ? skill.name : `Skill ${skillId}`;\n  }\n  getSkillLevelName(levelId) {\n    const level = this.skillLevels.find(l => l.id === levelId);\n    return level ? level.level_name : `Level ${levelId}`;\n  }\n  navigateToMatching(jobId) {\n    this.router.navigate(['/matching'], {\n      queryParams: {\n        jobId: jobId\n      }\n    });\n  }\n};\nJobDescriptionsComponent = __decorate([Component({\n  selector: 'app-job-descriptions',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterLink],\n  templateUrl: './job-descriptions.component.html',\n  styleUrls: ['./job-descriptions.component.css']\n})], JobDescriptionsComponent);\nexport { JobDescriptionsComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","ReactiveFormsModule","Validators","RouterLink","JobDescriptionsComponent","constructor","jobDescriptionService","skillService","formBuilder","router","jobDescriptions","filteredJobDescriptions","showAddForm","editingJobDescription","loading","errorMessage","searchQuery","selectedFiliere","selectedFamille","skills","skillLevels","filiereOptions","familleOptions","jobDescriptionForm","group","emploi","required","minLength","filiere_activite","famille","superieur_n1","superieur_n2","finalite","niveau_exigence","niveau_exp","status","version","missions","array","moyens","airesProximites","requiredSkills","ngOnInit","loadJobDescriptions","loadSkillsData","missionsArray","get","moyensArray","airesProximiteArray","requiredSkillsArray","getJobDescriptions","subscribe","next","extractFilterOptions","error","err","console","Promise","all","getSkills","toPromise","getSkillLevels","then","catch","filieres","Set","familles","forEach","job","add","Array","from","sort","addMission","missionGroup","name","push","removeMission","index","removeAt","addMoyen","moyenGroup","removeMoyen","addAireProximite","aireGroup","nombre","min","removeAireProximite","addRequiredSkill","skillGroup","skill_id","required_skill_level_id","removeRequiredSkill","getSuperieurName","superieurId","superieur","find","id","applyFilters","filter","matchesSearch","toLowerCase","includes","matchesFiliere","matchesFamille","onSearchChange","onFilterChange","clearFilters","onSubmit","valid","formValue","value","jobDescriptionData","trim","parseIntegerField","map","skill","parseInt","log","JSON","stringify","updateJobDescription","updatedJobDescription","findIndex","cancelEdit","message","createJobDescription","newJobDescription","parsed","isNaN","editJobDescription","jobDescription","patchValue","populateFormArrays","length","mission","moyen","aire","poste","deleteJobDescription","window","confirm","reset","getSkillName","skillId","s","getSkillLevelName","levelId","level","l","level_name","navigateToMatching","jobId","navigate","queryParams","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\job-descriptions\\job-descriptions.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { JobDescriptionService } from '../../services/job-description.service';\nimport { SkillService } from '../../services/skill.service';\nimport { JobDescription } from '../../models/job-description.model';\nimport { Skill, SkillLevel } from '../../models/employee.model';\n\n@Component({\n  selector: 'app-job-descriptions',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, RouterLink],\n  templateUrl: './job-descriptions.component.html',\n  styleUrls: ['./job-descriptions.component.css']\n})\nexport class JobDescriptionsComponent implements OnInit {\n  jobDescriptions: JobDescription[] = [];\n  filteredJobDescriptions: JobDescription[] = [];\n  jobDescriptionForm: FormGroup;\n  showAddForm: boolean = false;\n  editingJobDescription: JobDescription | null = null;\n  loading: boolean = false;\n  errorMessage: string | null = null;\n  searchQuery: string = '';\n  selectedFiliere: string = '';\n  selectedFamille: string = '';\n\n  // Data for dropdowns\n  skills: Skill[] = [];\n  skillLevels: SkillLevel[] = [];\n\n  // Filter options\n  filiereOptions: string[] = [];\n  familleOptions: string[] = [];\n\n  constructor(\n    private jobDescriptionService: JobDescriptionService,\n    private skillService: SkillService,\n    private formBuilder: FormBuilder,\n    private router: Router\n  ) {\n    this.jobDescriptionForm = this.formBuilder.group({\n      emploi: ['', [Validators.required, Validators.minLength(3)]],\n      filiere_activite: ['', Validators.required],\n      famille: ['', Validators.required],\n      superieur_n1: [''],\n      superieur_n2: [''],\n      superieur_n1: [''],\n      superieur_n2: [''],\n      superieur_n1: [''],\n      superieur_n2: [''],\n      finalite: [''],\n      niveau_exigence: [''],\n      niveau_exp: [''],\n      status: ['Actif'],\n      version: ['1.0'],\n      missions: this.formBuilder.array([]),\n      moyens: this.formBuilder.array([]),\n      airesProximites: this.formBuilder.array([]),\n      requiredSkills: this.formBuilder.array([])\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadJobDescriptions();\n    this.loadSkillsData();\n  }\n\n  // FormArray getters\n  get missionsArray(): FormArray {\n    return this.jobDescriptionForm.get('missions') as FormArray;\n  }\n\n  get moyensArray(): FormArray {\n    return this.jobDescriptionForm.get('moyens') as FormArray;\n  }\n\n  get airesProximiteArray(): FormArray {\n    return this.jobDescriptionForm.get('airesProximites') as FormArray;\n  }\n\n  get requiredSkillsArray(): FormArray {\n    return this.jobDescriptionForm.get('requiredSkills') as FormArray;\n  }\n\n  loadJobDescriptions(): void {\n    this.loading = true;\n    this.errorMessage = null;\n    this.jobDescriptionService.getJobDescriptions().subscribe({\n      next: (jobDescriptions) => {\n        this.jobDescriptions = jobDescriptions;\n        this.filteredJobDescriptions = [...jobDescriptions];\n        this.extractFilterOptions();\n        this.loading = false;\n      },\n      error: (err) => {\n        console.error('Error loading job descriptions:', err);\n        this.errorMessage = 'Erreur lors du chargement des fiches de poste.';\n        this.loading = false;\n      }\n    });\n  }\n\n  loadSkillsData(): void {\n    Promise.all([\n      this.skillService.getSkills().toPromise(),\n      this.skillService.getSkillLevels().toPromise()\n    ]).then(([skills, skillLevels]) => {\n      this.skills = skills || [];\n      this.skillLevels = skillLevels || [];\n    }).catch(err => {\n      console.error('Error loading skills data:', err);\n    });\n  }\n\n  extractFilterOptions(): void {\n    const filieres = new Set<string>();\n    const familles = new Set<string>();\n\n    this.jobDescriptions.forEach(job => {\n      if (job.filiere_activite) filieres.add(job.filiere_activite);\n      if (job.famille) familles.add(job.famille);\n    });\n\n    this.filiereOptions = Array.from(filieres).sort();\n    this.familleOptions = Array.from(familles).sort();\n  }\n\n  // Mission methods\n  addMission(): void {\n    const missionGroup = this.formBuilder.group({\n      name: ['', Validators.required]\n    });\n    this.missionsArray.push(missionGroup);\n  }\n\n  removeMission(index: number): void {\n    this.missionsArray.removeAt(index);\n  }\n\n  // Moyen methods\n  addMoyen(): void {\n    const moyenGroup = this.formBuilder.group({\n      name: ['', Validators.required]\n    });\n    this.moyensArray.push(moyenGroup);\n  }\n\n  removeMoyen(index: number): void {\n    this.moyensArray.removeAt(index);\n  }\n\n  // Aire de proximité methods\n  addAireProximite(): void {\n    const aireGroup = this.formBuilder.group({\n      name: ['', Validators.required],\n      nombre: [1, [Validators.required, Validators.min(1)]]\n    });\n    this.airesProximiteArray.push(aireGroup);\n  }\n\n  removeAireProximite(index: number): void {\n    this.airesProximiteArray.removeAt(index);\n  }\n\n  // Required skills methods\n  addRequiredSkill(): void {\n    const skillGroup = this.formBuilder.group({\n      skill_id: ['', Validators.required],\n      required_skill_level_id: ['', Validators.required]\n    });\n    this.requiredSkillsArray.push(skillGroup);\n  }\n\n  removeRequiredSkill(index: number): void {\n    this.requiredSkillsArray.removeAt(index);\n  }\n\n  getSuperieurName(superieurId: number): string {\n    const superieur = this.jobDescriptions.find(job => job.id === superieurId);\n    return superieur ? `${superieur.emploi}` : `ID: ${superieurId}`;\n  }\n\n  applyFilters(): void {\n    this.filteredJobDescriptions = this.jobDescriptions.filter(job => {\n      const matchesSearch = !this.searchQuery || \n        job.emploi.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\n        job.filiere_activite.toLowerCase().includes(this.searchQuery.toLowerCase()) ||\n        job.famille.toLowerCase().includes(this.searchQuery.toLowerCase());\n      \n      const matchesFiliere = !this.selectedFiliere || job.filiere_activite === this.selectedFiliere;\n      const matchesFamille = !this.selectedFamille || job.famille === this.selectedFamille;\n\n      return matchesSearch && matchesFiliere && matchesFamille;\n    });\n  }\n\n  onSearchChange(): void {\n    this.applyFilters();\n  }\n\n  onFilterChange(): void {\n    this.applyFilters();\n  }\n\n  clearFilters(): void {\n    this.searchQuery = '';\n    this.selectedFiliere = '';\n    this.selectedFamille = '';\n    this.filteredJobDescriptions = [...this.jobDescriptions];\n  }\n\n  onSubmit(): void {\n    if (this.jobDescriptionForm.valid) {\n      const formValue = this.jobDescriptionForm.value;\n      \n      // Préparer les données exactement comme dans votre JSON\n      const jobDescriptionData = {\n        emploi: formValue.emploi?.trim() || '',\n        filiere_activite: formValue.filiere_activite?.trim() || '',\n        famille: formValue.famille?.trim() || '',\n        superieur_n1: this.parseIntegerField(formValue.superieur_n1),\n        superieur_n2: this.parseIntegerField(formValue.superieur_n2),\n        superieur_n1: this.parseIntegerField(formValue.superieur_n1),\n        superieur_n2: this.parseIntegerField(formValue.superieur_n2),\n        finalite: formValue.finalite?.trim() || '',\n        niveau_exigence: formValue.niveau_exigence || '',\n        niveau_exp: formValue.niveau_exp || '',\n        status: formValue.status || 'Actif',\n        version: formValue.version || '1.0',\n        missions: formValue.missions || [],\n        moyens: formValue.moyens || [],\n        airesProximites: formValue.airesProximites || [],\n        requiredSkills: formValue.requiredSkills.map((skill: any) => ({\n          skill_id: parseInt(skill.skill_id, 10),\n          required_skill_level_id: parseInt(skill.required_skill_level_id, 10)\n        })) || []\n      };\n\n      console.log('Données à envoyer:', JSON.stringify(jobDescriptionData, null, 2));\n      \n      if (this.editingJobDescription) {\n        this.jobDescriptionService.updateJobDescription(this.editingJobDescription.id!, jobDescriptionData).subscribe({\n          next: (updatedJobDescription) => {\n            const index = this.jobDescriptions.findIndex(job => job.id === updatedJobDescription.id);\n            if (index !== -1) {\n              this.jobDescriptions[index] = updatedJobDescription;\n            }\n            this.applyFilters();\n            this.cancelEdit();\n            this.errorMessage = null;\n          },\n          error: (err) => {\n            console.error('Error updating job description:', err);\n            this.errorMessage = `Erreur lors de la mise à jour: ${err.error?.message || err.message}`;\n          }\n        });\n      } else {\n        this.jobDescriptionService.createJobDescription(jobDescriptionData).subscribe({\n          next: (newJobDescription) => {\n            this.jobDescriptions.push(newJobDescription);\n            this.applyFilters();\n            this.extractFilterOptions();\n            this.cancelEdit();\n            this.errorMessage = null;\n          },\n          error: (err) => {\n            console.error('Error creating job description:', err);\n            this.errorMessage = `Erreur lors de la création: ${err.error?.message || err.message}`;\n          }\n        });\n      }\n    }\n  }\n\n  private parseIntegerField(value: any): number | null {\n    if (!value || value === '' || value === 'null' || value === 'undefined') {\n      return null;\n    }\n    const parsed = parseInt(value, 10);\n    return isNaN(parsed) ? null : parsed;\n  }\n\n  editJobDescription(jobDescription: JobDescription): void {\n    this.editingJobDescription = jobDescription;\n    this.showAddForm = false;\n    \n    // Remplir le formulaire avec les données existantes\n    this.jobDescriptionForm.patchValue({\n      emploi: jobDescription.emploi,\n      filiere_activite: jobDescription.filiere_activite,\n      famille: jobDescription.famille,\n      superieur_n1: jobDescription.superieur_n1 || '',\n      superieur_n2: jobDescription.superieur_n2 || '',\n      superieur_n1: jobDescription.superieur_n1 || '',\n      superieur_n2: jobDescription.superieur_n2 || '',\n      finalite: jobDescription.finalite || '',\n      niveau_exigence: jobDescription.niveau_exigence || '',\n      niveau_exp: jobDescription.niveau_exp || '',\n      status: jobDescription.status || 'Actif',\n      version: jobDescription.version || '1.0'\n    });\n\n    // Remplir les arrays\n    this.populateFormArrays(jobDescription);\n  }\n\n  private populateFormArrays(jobDescription: JobDescription): void {\n    // Clear existing arrays\n    while (this.missionsArray.length !== 0) {\n      this.missionsArray.removeAt(0);\n    }\n    while (this.moyensArray.length !== 0) {\n      this.moyensArray.removeAt(0);\n    }\n    while (this.airesProximiteArray.length !== 0) {\n      this.airesProximiteArray.removeAt(0);\n    }\n    while (this.requiredSkillsArray.length !== 0) {\n      this.requiredSkillsArray.removeAt(0);\n    }\n\n    // Populate missions\n    if (jobDescription.missions) {\n      jobDescription.missions.forEach(mission => {\n        const missionGroup = this.formBuilder.group({\n          name: [mission.mission || '', Validators.required]\n        });\n        this.missionsArray.push(missionGroup);\n      });\n    }\n\n    // Populate moyens\n    if (jobDescription.moyens) {\n      jobDescription.moyens.forEach(moyen => {\n        const moyenGroup = this.formBuilder.group({\n          name: [moyen.moyen || '', Validators.required]\n        });\n        this.moyensArray.push(moyenGroup);\n      });\n    }\n\n    // Populate aires de proximité\n    if (jobDescription.airesProximites) {\n      jobDescription.airesProximites.forEach(aire => {\n        const aireGroup = this.formBuilder.group({\n          name: [aire.poste || '', Validators.required],\n          nombre: [aire.nombre || 1, [Validators.required, Validators.min(1)]]\n        });\n        this.airesProximiteArray.push(aireGroup);\n      });\n    }\n\n    // Populate required skills\n    if (jobDescription.requiredSkills) {\n      jobDescription.requiredSkills.forEach(skill => {\n        const skillGroup = this.formBuilder.group({\n          skill_id: [skill.skill_id || '', Validators.required],\n          required_skill_level_id: [skill.required_skill_level_id || '', Validators.required]\n        });\n        this.requiredSkillsArray.push(skillGroup);\n      });\n    }\n  }\n\n  deleteJobDescription(jobDescription: JobDescription): void {\n    if (window.confirm(`Êtes-vous sûr de vouloir supprimer la fiche \"${jobDescription.emploi}\" ?`)) {\n      this.jobDescriptionService.deleteJobDescription(jobDescription.id!).subscribe({\n        next: () => {\n          this.jobDescriptions = this.jobDescriptions.filter(job => job.id !== jobDescription.id);\n          this.applyFilters();\n          this.extractFilterOptions();\n          this.errorMessage = null;\n        },\n        error: (err) => {\n          console.error('Error deleting job description:', err);\n          this.errorMessage = 'Erreur lors de la suppression de la fiche de poste.';\n        }\n      });\n    }\n  }\n\n  cancelEdit(): void {\n    this.editingJobDescription = null;\n    this.showAddForm = false;\n    this.jobDescriptionForm.reset({\n      superieur_n1: '',\n      superieur_n2: '',\n      status: 'Actif',\n      version: '1.0'\n    });\n    \n    // Clear all form arrays\n    while (this.missionsArray.length !== 0) {\n      this.missionsArray.removeAt(0);\n    }\n    while (this.moyensArray.length !== 0) {\n      this.moyensArray.removeAt(0);\n    }\n    while (this.airesProximiteArray.length !== 0) {\n      this.airesProximiteArray.removeAt(0);\n    }\n    while (this.requiredSkillsArray.length !== 0) {\n      this.requiredSkillsArray.removeAt(0);\n    }\n  }\n\n  getSkillName(skillId: number): string {\n    const skill = this.skills.find(s => s.id === skillId);\n    return skill ? skill.name : `Skill ${skillId}`;\n  }\n\n  getSkillLevelName(levelId: number): string {\n    const level = this.skillLevels.find(l => l.id === levelId);\n    return level ? level.level_name : `Level ${levelId}`;\n  }\n\n  navigateToMatching(jobId: number): void {\n    this.router.navigate(['/matching'], { queryParams: { jobId: jobId } });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}