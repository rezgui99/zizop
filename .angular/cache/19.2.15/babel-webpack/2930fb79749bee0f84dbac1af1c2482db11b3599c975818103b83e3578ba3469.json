{"ast":null,"code":"import { BehaviorSubject, throwError, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.backendUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.tokenSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.token$ = this.tokenSubject.asObservable();\n    this.loadTokenFromStorage();\n  }\n  loadTokenFromStorage() {\n    const token = localStorage.getItem('auth_token');\n    const user = localStorage.getItem('current_user');\n    if (token && user) {\n      try {\n        this.tokenSubject.next(token);\n        this.currentUserSubject.next(JSON.parse(user));\n      } catch {\n        this.clearAuthData();\n      }\n    }\n  }\n  setAuthData(token, user) {\n    localStorage.setItem('auth_token', token);\n    localStorage.setItem('current_user', JSON.stringify(user));\n    this.tokenSubject.next(token);\n    this.currentUserSubject.next(user);\n  }\n  clearAuthData() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('current_user');\n    this.tokenSubject.next(null);\n    this.currentUserSubject.next(null);\n  }\n  handleError(error) {\n    let errorMessage = 'Une erreur inattendue s\\'est produite';\n    if (error.error?.message) errorMessage = error.error.message;else if (error.message) errorMessage = error.message;\n    return throwError(() => ({\n      error: error.error?.error || 'Unknown error',\n      message: errorMessage,\n      details: error.error?.details || []\n    }));\n  }\n  get currentUser() {\n    return this.currentUserSubject.value;\n  }\n  get token() {\n    return this.tokenSubject.value;\n  }\n  get isAuthenticated() {\n    return !!this.token && !!this.currentUser;\n  }\n  register(data) {\n    return this.http.post(`${this.apiUrl}/register`, data).pipe(tap(res => this.setAuthData(res.token, res.user)), catchError(err => this.handleError(err)));\n  }\n  login(data) {\n    return this.http.post(`${this.apiUrl}/login`, data).pipe(tap(res => this.setAuthData(res.token, res.user)), catchError(err => this.handleError(err)));\n  }\n  logout() {\n    this.clearAuthData();\n    this.router.navigate(['/auth/login']);\n    return of();\n  }\n  forceLogout() {\n    this.clearAuthData();\n    this.router.navigate(['/auth/login']);\n  }\n  forgotPassword(data) {\n    return this.http.post(`${this.apiUrl}/forgot-password`, data).pipe(catchError(err => this.handleError(err)));\n  }\n  resetPassword(data) {\n    return this.http.post(`${this.apiUrl}/reset-password`, data).pipe(catchError(err => this.handleError(err)));\n  }\n  getProfile() {\n    return this.http.get(`${this.apiUrl}/profile`).pipe(tap(res => {\n      this.currentUserSubject.next(res.user);\n      localStorage.setItem('current_user', JSON.stringify(res.user));\n    }), catchError(err => this.handleError(err)));\n  }\n  updateProfile(data) {\n    return this.http.put(`${this.apiUrl}/profile`, data).pipe(tap(res => {\n      this.currentUserSubject.next(res.user);\n      localStorage.setItem('current_user', JSON.stringify(res.user));\n    }), catchError(err => this.handleError(err)));\n  }\n  hasRole(role) {\n    return this.currentUser?.role === role;\n  }\n  hasAnyRole(roles) {\n    return roles.includes(this.currentUser?.role || '');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","of","tap","catchError","environment","AuthService","constructor","http","router","apiUrl","backendUrl","currentUserSubject","tokenSubject","currentUser$","asObservable","token$","loadTokenFromStorage","token","localStorage","getItem","user","next","JSON","parse","clearAuthData","setAuthData","setItem","stringify","removeItem","handleError","error","errorMessage","message","details","currentUser","value","isAuthenticated","register","data","post","pipe","res","err","login","logout","navigate","forceLogout","forgotPassword","resetPassword","getProfile","get","updateProfile","put","hasRole","role","hasAnyRole","roles","includes","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError, of } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { \r\n  User, \r\n  LoginRequest, \r\n  RegisterRequest, \r\n  AuthResponse, \r\n  ForgotPasswordRequest, \r\n  ResetPasswordRequest,\r\n  UpdateProfileRequest,\r\n  ApiError \r\n} from '../models/auth.model';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.backendUrl}/auth`;\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  private tokenSubject = new BehaviorSubject<string | null>(null);\r\n\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  public token$ = this.tokenSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    this.loadTokenFromStorage();\r\n  }\r\n\r\n  private loadTokenFromStorage(): void {\r\n    const token = localStorage.getItem('auth_token');\r\n    const user = localStorage.getItem('current_user');\r\n\r\n    if (token && user) {\r\n      try {\r\n        this.tokenSubject.next(token);\r\n        this.currentUserSubject.next(JSON.parse(user));\r\n      } catch {\r\n        this.clearAuthData();\r\n      }\r\n    }\r\n  }\r\n\r\n  private setAuthData(token: string, user: User): void {\r\n    localStorage.setItem('auth_token', token);\r\n    localStorage.setItem('current_user', JSON.stringify(user));\r\n    this.tokenSubject.next(token);\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  private clearAuthData(): void {\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('current_user');\r\n    this.tokenSubject.next(null);\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'Une erreur inattendue s\\'est produite';\r\n    if (error.error?.message) errorMessage = error.error.message;\r\n    else if (error.message) errorMessage = error.message;\r\n\r\n    return throwError(() => ({\r\n      error: error.error?.error || 'Unknown error',\r\n      message: errorMessage,\r\n      details: error.error?.details || []\r\n    } as ApiError));\r\n  }\r\n\r\n  get currentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  get token(): string | null {\r\n    return this.tokenSubject.value;\r\n  }\r\n\r\n  get isAuthenticated(): boolean {\r\n    return !!this.token && !!this.currentUser;\r\n  }\r\n\r\n  register(data: RegisterRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, data)\r\n      .pipe(\r\n        tap(res => this.setAuthData(res.token, res.user)),\r\n        catchError(err => this.handleError(err))\r\n      );\r\n  }\r\n\r\n  login(data: LoginRequest): Observable<AuthResponse> {\r\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, data)\r\n      .pipe(\r\n        tap(res => this.setAuthData(res.token, res.user)),\r\n        catchError(err => this.handleError(err))\r\n      );\r\n  }\r\n\r\n  logout(): Observable<void> {\r\n    this.clearAuthData();\r\n    this.router.navigate(['/auth/login']);\r\n    return of();\r\n  }\r\n\r\n  forceLogout(): void {\r\n    this.clearAuthData();\r\n    this.router.navigate(['/auth/login']);\r\n  }\r\n\r\n  forgotPassword(data: ForgotPasswordRequest): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/forgot-password`, data)\r\n      .pipe(catchError(err => this.handleError(err)));\r\n  }\r\n\r\n  resetPassword(data: ResetPasswordRequest): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/reset-password`, data)\r\n      .pipe(catchError(err => this.handleError(err)));\r\n  }\r\n\r\n  getProfile(): Observable<{ user: User }> {\r\n    return this.http.get<{ user: User }>(`${this.apiUrl}/profile`)\r\n      .pipe(\r\n        tap(res => {\r\n          this.currentUserSubject.next(res.user);\r\n          localStorage.setItem('current_user', JSON.stringify(res.user));\r\n        }),\r\n        catchError(err => this.handleError(err))\r\n      );\r\n  }\r\n\r\n  updateProfile(data: UpdateProfileRequest): Observable<{ message: string; user: User }> {\r\n    return this.http.put<{ message: string; user: User }>(`${this.apiUrl}/profile`, data)\r\n      .pipe(\r\n        tap(res => {\r\n          this.currentUserSubject.next(res.user);\r\n          localStorage.setItem('current_user', JSON.stringify(res.user));\r\n        }),\r\n        catchError(err => this.handleError(err))\r\n      );\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    return this.currentUser?.role === role;\r\n  }\r\n\r\n  hasAnyRole(roles: string[]): boolean {\r\n    return roles.includes(this.currentUser?.role || '');\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}