{"ast":null,"code":"import { inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule, FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { catchError, finalize, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ProfileComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProfileComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction ProfileComponent_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.successMessage);\n  }\n}\nexport class ProfileComponent {\n  constructor() {\n    // Injection des services\n    this.fb = inject(FormBuilder);\n    this.route = inject(ActivatedRoute);\n    this.router = inject(Router);\n    this.employeeService = inject(EmployeeService);\n    this.skillService = inject(SkillService);\n    this.employee = null;\n    this.skills = [];\n    this.skillTypes = [];\n    this.skillLevels = [];\n    this.employeeSkills = [];\n    // États du composant\n    this.loading = false;\n    this.saving = false;\n    this.isEditMode = false;\n    this.errorMessage = '';\n    this.successMessage = '';\n    // ID de l'employé depuis l'URL\n    this.employeeId = '';\n  }\n  ngOnInit() {\n    // Récupération de l'ID depuis l'URL\n    this.employeeId = this.route.snapshot.paramMap.get('id') || '';\n    if (!this.employeeId) {\n      this.errorMessage = 'ID employé manquant';\n      return;\n    }\n    // Initialisation du formulaire\n    this.initializeForm();\n    // Chargement des données\n    this.loadInitialData();\n  }\n  /**\n   * Initialise le formulaire réactif avec les champs employé et le FormArray pour les compétences\n   */\n  initializeForm() {\n    this.profileForm = this.fb.group({\n      // Champs de l'employé\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      position: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      hire_date: ['', Validators.required],\n      phone: [''],\n      gender: [''],\n      location: [''],\n      notes: [''],\n      // FormArray pour les compétences\n      skills: this.fb.array([])\n    });\n    // Désactiver le formulaire par défaut (mode lecture)\n    this.profileForm.disable();\n  }\n  /**\n   * Charge toutes les données initiales nécessaires\n   */\n  loadInitialData() {\n    this.loading = true;\n    this.clearMessages();\n    // Chargement en parallèle de toutes les données\n    Promise.all([this.loadEmployee(), this.loadSkillsData()]).finally(() => {\n      this.loading = false;\n    });\n  }\n  /**\n   * Charge les informations de l'employé\n   */\n  loadEmployee() {\n    return new Promise((resolve, reject) => {\n      this.employeeService.getEmployeeById(this.employeeId).pipe(catchError(error => {\n        this.errorMessage = 'Erreur lors du chargement des données employé';\n        console.error('Error loading employee:', error);\n        reject(error);\n        return of(null);\n      })).subscribe(employee => {\n        if (employee) {\n          this.employee = employee;\n          this.populateEmployeeForm(employee);\n          // Charger les compétences de l'employé\n          this.loadEmployeeSkills();\n        }\n        resolve();\n      });\n    });\n  }\n  /**\n   * Charge les données de référence des compétences\n   */\n  loadSkillsData() {\n    return new Promise((resolve, reject) => {\n      Promise.all([this.skillService.getSkills().toPromise(), this.skillService.getSkillTypes().toPromise(), this.skillService.getSkillLevels().toPromise()]).then(([skills, skillTypes, skillLevels]) => {\n        this.skills = skills || [];\n        this.skillTypes = skillTypes || [];\n        this.skillLevels = skillLevels || [];\n        resolve();\n      }).catch(error => {\n        this.errorMessage = 'Erreur lors du chargement des données de compétences';\n        console.error('Error loading skills data:', error);\n        reject(error);\n      });\n    });\n  }\n  /**\n   * Charge les compétences de l'employé (appelé après le chargement de l'employé)\n   */\n  loadEmployeeSkills() {\n    // Cette méthode devrait être appelée avec un service approprié\n    // Pour l'exemple, nous supposons que les compétences sont incluses dans l'objet Employee\n    // ou chargées séparément\n    this.populateSkillsForm();\n  }\n  /**\n   * Remplit le formulaire avec les données de l'employé\n   */\n  populateEmployeeForm(employee) {\n    this.profileForm.patchValue({\n      name: employee.name,\n      position: employee.position,\n      email: employee.email,\n      hire_date: employee.hire_date,\n      phone: employee.phone,\n      gender: employee.gender,\n      location: employee.location,\n      notes: employee.notes\n    });\n  }\n  /**\n   * Remplit le FormArray des compétences\n   */\n  populateSkillsForm() {\n    const skillsArray = this.getSkillsFormArray();\n    skillsArray.clear();\n    this.employeeSkills.forEach(employeeSkill => {\n      skillsArray.push(this.createSkillFormGroup(employeeSkill));\n    });\n  }\n  /**\n   * Crée un FormGroup pour une compétence\n   */\n  createSkillFormGroup(employeeSkill) {\n    return this.fb.group({\n      id: [employeeSkill?.id || ''],\n      skill_id: [employeeSkill?.skill_id || '', Validators.required],\n      skill_level_id: [employeeSkill?.skill_level_id || '', Validators.required],\n      years_experience: [employeeSkill?.years_experience || 0, [Validators.required, Validators.min(0)]],\n      notes: [employeeSkill?.notes || '']\n    });\n  }\n  /**\n   * Retourne le FormArray des compétences\n   */\n  getSkillsFormArray() {\n    return this.profileForm.get('skills');\n  }\n  /**\n   * Ajoute une nouvelle compétence au formulaire\n   */\n  addSkill() {\n    const skillsArray = this.getSkillsFormArray();\n    skillsArray.push(this.createSkillFormGroup());\n  }\n  /**\n   * Supprime une compétence du formulaire et de la base de données si elle existe\n   */\n  removeSkill(index) {\n    const skillsArray = this.getSkillsFormArray();\n    const skillControl = skillsArray.at(index);\n    const skillId = skillControl.get('id')?.value;\n    // Si la compétence existe en base, la supprimer\n    if (skillId) {\n      this.deleteEmployeeSkill(skillId);\n    }\n    // Supprimer du formulaire\n    skillsArray.removeAt(index);\n  }\n  /**\n   * Supprime une compétence employé de la base de données\n   */\n  deleteEmployeeSkill(skillId) {\n    this.skillService.deleteEmployeeSkill(this.employeeId, skillId).pipe(catchError(error => {\n      this.errorMessage = 'Erreur lors de la suppression de la compétence';\n      console.error('Error deleting skill:', error);\n      return of(null);\n    })).subscribe(() => {\n      this.successMessage = 'Compétence supprimée avec succès';\n      this.clearMessagesAfterDelay();\n    });\n  }\n  /**\n   * Bascule entre le mode édition et le mode lecture\n   */\n  toggleEdit() {\n    this.isEditMode = !this.isEditMode;\n    this.clearMessages();\n    if (this.isEditMode) {\n      this.profileForm.enable();\n    } else {\n      this.profileForm.disable();\n      // Recharger les données originales\n      if (this.employee) {\n        this.populateEmployeeForm(this.employee);\n        this.populateSkillsForm();\n      }\n    }\n  }\n  /**\n   * Soumet le formulaire (mise à jour de l'employé et des compétences)\n   */\n  onSubmit() {\n    if (this.profileForm.invalid) {\n      this.markFormGroupTouched(this.profileForm);\n      this.errorMessage = 'Veuillez corriger les erreurs du formulaire';\n      return;\n    }\n    this.saving = true;\n    this.clearMessages();\n    // Séparer les données employé des compétences\n    const formValue = this.profileForm.value;\n    const employeeData = {\n      name: formValue.name,\n      position: formValue.position,\n      email: formValue.email,\n      hire_date: formValue.hire_date,\n      phone: formValue.phone,\n      gender: formValue.gender,\n      location: formValue.location,\n      notes: formValue.notes\n    };\n    // Mettre à jour l'employé (sans les compétences)\n    this.employeeService.updateEmployee(this.employeeId, employeeData).pipe(catchError(error => {\n      this.errorMessage = 'Erreur lors de la mise à jour du profil';\n      console.error('Error updating employee:', error);\n      return of(null);\n    }), finalize(() => {\n      this.saving = false;\n    })).subscribe(updatedEmployee => {\n      if (updatedEmployee) {\n        this.employee = updatedEmployee;\n        this.successMessage = 'Profil mis à jour avec succès';\n        // Mettre à jour les compétences séparément\n        this.updateEmployeeSkills();\n        // Sortir du mode édition\n        this.isEditMode = false;\n        this.profileForm.disable();\n        this.clearMessagesAfterDelay();\n      }\n    });\n  }\n  /**\n   * Met à jour les compétences de l'employé\n   */\n  updateEmployeeSkills() {\n    const skillsArray = this.getSkillsFormArray();\n    const skillsToUpdate = skillsArray.value;\n    skillsToUpdate.forEach((skill, index) => {\n      const payload = {\n        employee_id: this.employeeId,\n        skill_id: skill.skill_id,\n        skill_level_id: skill.skill_level_id,\n        years_experience: skill.years_experience,\n        notes: skill.notes\n      };\n      if (skill.id) {\n        // Mise à jour d'une compétence existante\n        this.skillService.updateEmployeeSkill(this.employeeId, skill.id, payload).pipe(catchError(error => {\n          console.error('Error updating skill:', error);\n          return of(null);\n        })).subscribe();\n      } else {\n        // Création d'une nouvelle compétence\n        this.skillService.createEmployeeSkill(payload).pipe(catchError(error => {\n          console.error('Error creating skill:', error);\n          return of(null);\n        })).subscribe(createdSkill => {\n          if (createdSkill) {\n            // Mettre à jour l'ID dans le formulaire\n            skillsArray.at(index).patchValue({\n              id: createdSkill.id\n            });\n          }\n        });\n      }\n    });\n  }\n  /**\n   * Retourne le nom d'une compétence par son ID\n   */\n  getSkillName(skillId) {\n    const skill = this.skills.find(s => s.id === skillId);\n    return skill ? skill.name : 'Compétence inconnue';\n  }\n  /**\n   * Retourne le nom d'un niveau de compétence par son ID\n   */\n  getSkillLevelName(skillLevelId) {\n    const skillLevel = this.skillLevels.find(sl => sl.id === skillLevelId);\n    return skillLevel ? skillLevel.name : 'Niveau inconnu';\n  }\n  /**\n   * Retourne à la page précédente\n   */\n  goBack() {\n    this.router.navigate(['/employees']);\n  }\n  /**\n   * Marque tous les champs du formulaire comme touchés pour afficher les erreurs\n   */\n  markFormGroupTouched(formGroup) {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      control?.markAsTouched();\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      } else if (control instanceof FormArray) {\n        control.controls.forEach(arrayControl => {\n          if (arrayControl instanceof FormGroup) {\n            this.markFormGroupTouched(arrayControl);\n          }\n        });\n      }\n    });\n  }\n  /**\n   * Efface les messages d'erreur et de succès\n   */\n  clearMessages() {\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n  /**\n   * Efface les messages après un délai\n   */\n  clearMessagesAfterDelay(delay = 3000) {\n    setTimeout(() => {\n      this.clearMessages();\n    }, delay);\n  }\n  /**\n   * Retourne si un champ du formulaire a une erreur\n   */\n  hasFieldError(fieldName) {\n    const field = this.profileForm.get(fieldName);\n    return !!(field && field.invalid && field.touched);\n  }\n  /**\n   * Retourne le message d'erreur d'un champ\n   */\n  getFieldError(fieldName) {\n    const field = this.profileForm.get(fieldName);\n    if (!field || !field.errors || !field.touched) {\n      return '';\n    }\n    const errors = field.errors;\n    if (errors['required']) return 'Ce champ est requis';\n    if (errors['email']) return 'Format d\\'email invalide';\n    if (errors['minlength']) return `Minimum ${errors['minlength'].requiredLength} caractères`;\n    if (errors['min']) return `Valeur minimum: ${errors['min'].min}`;\n    return 'Erreur de validation';\n  }\n  static {\n    this.ɵfac = function ProfileComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProfileComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProfileComponent,\n      selectors: [[\"app-profile\"]],\n      decls: 6,\n      vars: 3,\n      consts: [[4, \"ngIf\"], [\"class\", \"error\", 4, \"ngIf\"], [\"class\", \"success\", 4, \"ngIf\"], [1, \"error\"], [1, \"success\"]],\n      template: function ProfileComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n          i0.ɵɵtext(2, \"Employee Profile\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(3, ProfileComponent_p_3_Template, 2, 0, \"p\", 0)(4, ProfileComponent_p_4_Template, 2, 1, \"p\", 1)(5, ProfileComponent_p_5_Template, 2, 1, \"p\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n        }\n      },\n      dependencies: [CommonModule, i1.NgIf, ReactiveFormsModule, FormsModule],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["inject","CommonModule","ReactiveFormsModule","FormsModule","FormBuilder","FormGroup","FormArray","Validators","ActivatedRoute","Router","catchError","finalize","of","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","errorMessage","successMessage","ProfileComponent","constructor","fb","route","router","employeeService","EmployeeService","skillService","SkillService","employee","skills","skillTypes","skillLevels","employeeSkills","loading","saving","isEditMode","employeeId","ngOnInit","snapshot","paramMap","get","initializeForm","loadInitialData","profileForm","group","name","required","minLength","position","email","hire_date","phone","gender","location","notes","array","disable","clearMessages","Promise","all","loadEmployee","loadSkillsData","finally","resolve","reject","getEmployeeById","pipe","error","console","subscribe","populateEmployeeForm","loadEmployeeSkills","getSkills","toPromise","getSkillTypes","getSkillLevels","then","catch","populateSkillsForm","patchValue","skillsArray","getSkillsFormArray","clear","forEach","employeeSkill","push","createSkillFormGroup","id","skill_id","skill_level_id","years_experience","min","addSkill","removeSkill","index","skillControl","at","skillId","value","deleteEmployeeSkill","removeAt","clearMessagesAfterDelay","toggleEdit","enable","onSubmit","invalid","markFormGroupTouched","formValue","employeeData","updateEmployee","updatedEmployee","updateEmployeeSkills","skillsToUpdate","skill","payload","employee_id","updateEmployeeSkill","createEmployeeSkill","createdSkill","getSkillName","find","s","getSkillLevelName","skillLevelId","skillLevel","sl","goBack","navigate","formGroup","Object","keys","controls","key","control","markAsTouched","arrayControl","delay","setTimeout","hasFieldError","fieldName","field","touched","getFieldError","errors","requiredLength","selectors","decls","vars","consts","template","ProfileComponent_Template","rf","ctx","ɵɵtemplate","ProfileComponent_p_3_Template","ProfileComponent_p_4_Template","ProfileComponent_p_5_Template","ɵɵproperty","i1","NgIf","encapsulation"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\profile\\profile.component.ts"],"sourcesContent":["import { Component, OnInit, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule, FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { catchError, finalize, of } from 'rxjs';\n\n// Interfaces pour le typage\ninterface Employee {\n  id: string;\n  name: string;\n  position: string;\n  email: string;\n  hire_date: string;\n  phone: string;\n  gender: string;\n  location: string;\n  notes: string;\n}\n\ninterface Skill {\n  id: string;\n  name: string;\n  type_id: string;\n}\n\ninterface SkillType {\n  id: string;\n  name: string;\n}\n\ninterface SkillLevel {\n  id: string;\n  name: string;\n  value: number;\n}\n\ninterface EmployeeSkill {\n  id?: string;\n  employee_id: string;\n  skill_id: string;\n  skill_level_id: string;\n  years_experience: number;\n  notes?: string;\n}\n\n// Services (à implémenter séparément)\ninterface EmployeeService {\n  getEmployeeById(id: string): any;\n  updateEmployee(id: string, employee: Partial<Employee>): any;\n}\n\ninterface SkillService {\n  getSkills(): any;\n  getSkillTypes(): any;\n  getSkillLevels(): any;\n  createEmployeeSkill(payload: EmployeeSkill): any;\n  updateEmployeeSkill(employeeId: string, skillId: string, payload: EmployeeSkill): any;\n  deleteEmployeeSkill(employeeId: string, skillId: string): any;\n}\n\n@Component({\n  selector: 'app-profile',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormsModule],\n  template: `\n    <!-- Template sera implémenté séparément -->\n    <div>\n      <h2>Employee Profile</h2>\n      <p *ngIf=\"loading\">Loading...</p>\n      <p *ngIf=\"errorMessage\" class=\"error\">{{ errorMessage }}</p>\n      <p *ngIf=\"successMessage\" class=\"success\">{{ successMessage }}</p>\n    </div>\n  `\n})\nexport class ProfileComponent implements OnInit {\n  // Injection des services\n  private fb = inject(FormBuilder);\n  private route = inject(ActivatedRoute);\n  private router = inject(Router);\n  private employeeService = inject(EmployeeService);\n  private skillService = inject(SkillService);\n\n  // Propriétés du composant\n  profileForm!: FormGroup;\n  employee: Employee | null = null;\n  skills: Skill[] = [];\n  skillTypes: SkillType[] = [];\n  skillLevels: SkillLevel[] = [];\n  employeeSkills: EmployeeSkill[] = [];\n\n  // États du composant\n  loading = false;\n  saving = false;\n  isEditMode = false;\n  errorMessage = '';\n  successMessage = '';\n\n  // ID de l'employé depuis l'URL\n  employeeId: string = '';\n\n  ngOnInit(): void {\n    // Récupération de l'ID depuis l'URL\n    this.employeeId = this.route.snapshot.paramMap.get('id') || '';\n    \n    if (!this.employeeId) {\n      this.errorMessage = 'ID employé manquant';\n      return;\n    }\n\n    // Initialisation du formulaire\n    this.initializeForm();\n\n    // Chargement des données\n    this.loadInitialData();\n  }\n\n  /**\n   * Initialise le formulaire réactif avec les champs employé et le FormArray pour les compétences\n   */\n  private initializeForm(): void {\n    this.profileForm = this.fb.group({\n      // Champs de l'employé\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      position: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      hire_date: ['', Validators.required],\n      phone: [''],\n      gender: [''],\n      location: [''],\n      notes: [''],\n      \n      // FormArray pour les compétences\n      skills: this.fb.array([])\n    });\n\n    // Désactiver le formulaire par défaut (mode lecture)\n    this.profileForm.disable();\n  }\n\n  /**\n   * Charge toutes les données initiales nécessaires\n   */\n  private loadInitialData(): void {\n    this.loading = true;\n    this.clearMessages();\n\n    // Chargement en parallèle de toutes les données\n    Promise.all([\n      this.loadEmployee(),\n      this.loadSkillsData()\n    ]).finally(() => {\n      this.loading = false;\n    });\n  }\n\n  /**\n   * Charge les informations de l'employé\n   */\n  private loadEmployee(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.employeeService.getEmployeeById(this.employeeId)\n        .pipe(\n          catchError((error: any) => {\n            this.errorMessage = 'Erreur lors du chargement des données employé';\n            console.error('Error loading employee:', error);\n            reject(error);\n            return of(null);\n          })\n        )\n        .subscribe((employee: Employee) => {\n          if (employee) {\n            this.employee = employee;\n            this.populateEmployeeForm(employee);\n            // Charger les compétences de l'employé\n            this.loadEmployeeSkills();\n          }\n          resolve();\n        });\n    });\n  }\n\n  /**\n   * Charge les données de référence des compétences\n   */\n  private loadSkillsData(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      Promise.all([\n        this.skillService.getSkills().toPromise(),\n        this.skillService.getSkillTypes().toPromise(),\n        this.skillService.getSkillLevels().toPromise()\n      ]).then(([skills, skillTypes, skillLevels]) => {\n        this.skills = skills || [];\n        this.skillTypes = skillTypes || [];\n        this.skillLevels = skillLevels || [];\n        resolve();\n      }).catch((error) => {\n        this.errorMessage = 'Erreur lors du chargement des données de compétences';\n        console.error('Error loading skills data:', error);\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Charge les compétences de l'employé (appelé après le chargement de l'employé)\n   */\n  private loadEmployeeSkills(): void {\n    // Cette méthode devrait être appelée avec un service approprié\n    // Pour l'exemple, nous supposons que les compétences sont incluses dans l'objet Employee\n    // ou chargées séparément\n    this.populateSkillsForm();\n  }\n\n  /**\n   * Remplit le formulaire avec les données de l'employé\n   */\n  private populateEmployeeForm(employee: Employee): void {\n    this.profileForm.patchValue({\n      name: employee.name,\n      position: employee.position,\n      email: employee.email,\n      hire_date: employee.hire_date,\n      phone: employee.phone,\n      gender: employee.gender,\n      location: employee.location,\n      notes: employee.notes\n    });\n  }\n\n  /**\n   * Remplit le FormArray des compétences\n   */\n  private populateSkillsForm(): void {\n    const skillsArray = this.getSkillsFormArray();\n    skillsArray.clear();\n\n    this.employeeSkills.forEach(employeeSkill => {\n      skillsArray.push(this.createSkillFormGroup(employeeSkill));\n    });\n  }\n\n  /**\n   * Crée un FormGroup pour une compétence\n   */\n  private createSkillFormGroup(employeeSkill?: EmployeeSkill): FormGroup {\n    return this.fb.group({\n      id: [employeeSkill?.id || ''],\n      skill_id: [employeeSkill?.skill_id || '', Validators.required],\n      skill_level_id: [employeeSkill?.skill_level_id || '', Validators.required],\n      years_experience: [employeeSkill?.years_experience || 0, [Validators.required, Validators.min(0)]],\n      notes: [employeeSkill?.notes || '']\n    });\n  }\n\n  /**\n   * Retourne le FormArray des compétences\n   */\n  getSkillsFormArray(): FormArray {\n    return this.profileForm.get('skills') as FormArray;\n  }\n\n  /**\n   * Ajoute une nouvelle compétence au formulaire\n   */\n  addSkill(): void {\n    const skillsArray = this.getSkillsFormArray();\n    skillsArray.push(this.createSkillFormGroup());\n  }\n\n  /**\n   * Supprime une compétence du formulaire et de la base de données si elle existe\n   */\n  removeSkill(index: number): void {\n    const skillsArray = this.getSkillsFormArray();\n    const skillControl = skillsArray.at(index);\n    const skillId = skillControl.get('id')?.value;\n\n    // Si la compétence existe en base, la supprimer\n    if (skillId) {\n      this.deleteEmployeeSkill(skillId);\n    }\n\n    // Supprimer du formulaire\n    skillsArray.removeAt(index);\n  }\n\n  /**\n   * Supprime une compétence employé de la base de données\n   */\n  private deleteEmployeeSkill(skillId: string): void {\n    this.skillService.deleteEmployeeSkill(this.employeeId, skillId)\n      .pipe(\n        catchError((error: any) => {\n          this.errorMessage = 'Erreur lors de la suppression de la compétence';\n          console.error('Error deleting skill:', error);\n          return of(null);\n        })\n      )\n      .subscribe(() => {\n        this.successMessage = 'Compétence supprimée avec succès';\n        this.clearMessagesAfterDelay();\n      });\n  }\n\n  /**\n   * Bascule entre le mode édition et le mode lecture\n   */\n  toggleEdit(): void {\n    this.isEditMode = !this.isEditMode;\n    this.clearMessages();\n\n    if (this.isEditMode) {\n      this.profileForm.enable();\n    } else {\n      this.profileForm.disable();\n      // Recharger les données originales\n      if (this.employee) {\n        this.populateEmployeeForm(this.employee);\n        this.populateSkillsForm();\n      }\n    }\n  }\n\n  /**\n   * Soumet le formulaire (mise à jour de l'employé et des compétences)\n   */\n  onSubmit(): void {\n    if (this.profileForm.invalid) {\n      this.markFormGroupTouched(this.profileForm);\n      this.errorMessage = 'Veuillez corriger les erreurs du formulaire';\n      return;\n    }\n\n    this.saving = true;\n    this.clearMessages();\n\n    // Séparer les données employé des compétences\n    const formValue = this.profileForm.value;\n    const employeeData = {\n      name: formValue.name,\n      position: formValue.position,\n      email: formValue.email,\n      hire_date: formValue.hire_date,\n      phone: formValue.phone,\n      gender: formValue.gender,\n      location: formValue.location,\n      notes: formValue.notes\n    };\n\n    // Mettre à jour l'employé (sans les compétences)\n    this.employeeService.updateEmployee(this.employeeId, employeeData)\n      .pipe(\n        catchError((error: any) => {\n          this.errorMessage = 'Erreur lors de la mise à jour du profil';\n          console.error('Error updating employee:', error);\n          return of(null);\n        }),\n        finalize(() => {\n          this.saving = false;\n        })\n      )\n      .subscribe((updatedEmployee: Employee) => {\n        if (updatedEmployee) {\n          this.employee = updatedEmployee;\n          this.successMessage = 'Profil mis à jour avec succès';\n          \n          // Mettre à jour les compétences séparément\n          this.updateEmployeeSkills();\n          \n          // Sortir du mode édition\n          this.isEditMode = false;\n          this.profileForm.disable();\n          \n          this.clearMessagesAfterDelay();\n        }\n      });\n  }\n\n  /**\n   * Met à jour les compétences de l'employé\n   */\n  private updateEmployeeSkills(): void {\n    const skillsArray = this.getSkillsFormArray();\n    const skillsToUpdate = skillsArray.value;\n\n    skillsToUpdate.forEach((skill: any, index: number) => {\n      const payload: EmployeeSkill = {\n        employee_id: this.employeeId,\n        skill_id: skill.skill_id,\n        skill_level_id: skill.skill_level_id,\n        years_experience: skill.years_experience,\n        notes: skill.notes\n      };\n\n      if (skill.id) {\n        // Mise à jour d'une compétence existante\n        this.skillService.updateEmployeeSkill(this.employeeId, skill.id, payload)\n          .pipe(\n            catchError((error: any) => {\n              console.error('Error updating skill:', error);\n              return of(null);\n            })\n          )\n          .subscribe();\n      } else {\n        // Création d'une nouvelle compétence\n        this.skillService.createEmployeeSkill(payload)\n          .pipe(\n            catchError((error: any) => {\n              console.error('Error creating skill:', error);\n              return of(null);\n            })\n          )\n          .subscribe((createdSkill: any) => {\n            if (createdSkill) {\n              // Mettre à jour l'ID dans le formulaire\n              skillsArray.at(index).patchValue({ id: createdSkill.id });\n            }\n          });\n      }\n    });\n  }\n\n  /**\n   * Retourne le nom d'une compétence par son ID\n   */\n  getSkillName(skillId: string): string {\n    const skill = this.skills.find(s => s.id === skillId);\n    return skill ? skill.name : 'Compétence inconnue';\n  }\n\n  /**\n   * Retourne le nom d'un niveau de compétence par son ID\n   */\n  getSkillLevelName(skillLevelId: string): string {\n    const skillLevel = this.skillLevels.find(sl => sl.id === skillLevelId);\n    return skillLevel ? skillLevel.name : 'Niveau inconnu';\n  }\n\n  /**\n   * Retourne à la page précédente\n   */\n  goBack(): void {\n    this.router.navigate(['/employees']);\n  }\n\n  /**\n   * Marque tous les champs du formulaire comme touchés pour afficher les erreurs\n   */\n  private markFormGroupTouched(formGroup: FormGroup): void {\n    Object.keys(formGroup.controls).forEach(key => {\n      const control = formGroup.get(key);\n      control?.markAsTouched();\n\n      if (control instanceof FormGroup) {\n        this.markFormGroupTouched(control);\n      } else if (control instanceof FormArray) {\n        control.controls.forEach(arrayControl => {\n          if (arrayControl instanceof FormGroup) {\n            this.markFormGroupTouched(arrayControl);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Efface les messages d'erreur et de succès\n   */\n  private clearMessages(): void {\n    this.errorMessage = '';\n    this.successMessage = '';\n  }\n\n  /**\n   * Efface les messages après un délai\n   */\n  private clearMessagesAfterDelay(delay: number = 3000): void {\n    setTimeout(() => {\n      this.clearMessages();\n    }, delay);\n  }\n\n  /**\n   * Retourne si un champ du formulaire a une erreur\n   */\n  hasFieldError(fieldName: string): boolean {\n    const field = this.profileForm.get(fieldName);\n    return !!(field && field.invalid && field.touched);\n  }\n\n  /**\n   * Retourne le message d'erreur d'un champ\n   */\n  getFieldError(fieldName: string): string {\n    const field = this.profileForm.get(fieldName);\n    if (!field || !field.errors || !field.touched) {\n      return '';\n    }\n\n    const errors = field.errors;\n    if (errors['required']) return 'Ce champ est requis';\n    if (errors['email']) return 'Format d\\'email invalide';\n    if (errors['minlength']) return `Minimum ${errors['minlength'].requiredLength} caractères`;\n    if (errors['min']) return `Valeur minimum: ${errors['min'].min}`;\n    \n    return 'Erreur de validation';\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}