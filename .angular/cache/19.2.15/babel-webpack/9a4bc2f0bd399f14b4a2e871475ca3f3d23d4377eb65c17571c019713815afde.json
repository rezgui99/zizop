{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nlet EmployeeSkillsComponent = class EmployeeSkillsComponent {\n  constructor(skillService, employeeService, skillMetaService, fb) {\n    this.skillService = skillService;\n    this.employeeService = employeeService;\n    this.skillMetaService = skillMetaService;\n    this.fb = fb;\n    this.skills = [];\n    this.employees = [];\n    this.skillsList = [];\n    this.skillLevels = [];\n    this.showAddForm = false;\n    this.editingSkill = null;\n    this.loading = false;\n    this.errorMessage = null;\n    // Dictionnaires pour accès rapide\n    this.employeeMap = {};\n    this.skillMap = {};\n    this.skillLevelMap = {};\n    this.skillForm = this.fb.group({\n      employee_id: ['', Validators.required],\n      skill_id: ['', Validators.required],\n      actual_skill_level_id: ['', Validators.required],\n      acquired_date: ['', Validators.required],\n      certification: [''],\n      last_evaluated_date: ['']\n    });\n  }\n  ngOnInit() {\n    this.loadEmployees();\n    this.loadSkills();\n    this.loadSkillList();\n    this.loadSkillLevels();\n  }\n  loadEmployees() {\n    this.employeeService.getEmployees().subscribe({\n      next: data => {\n        this.employees = data;\n        // Création du dictionnaire\n        this.employeeMap = {};\n        data.forEach(emp => this.employeeMap[emp.id] = emp.name);\n      },\n      error: err => console.error(err)\n    });\n  }\n  loadSkills() {\n    this.skillService.getAll().subscribe({\n      next: data => this.skills = data,\n      error: err => console.error(err)\n    });\n  }\n  loadSkillList() {\n    this.skillMetaService.getSkills().subscribe({\n      next: data => {\n        this.skillsList = data;\n        this.skillMap = {};\n        data.forEach(s => this.skillMap[s.id] = s.name);\n      },\n      error: err => console.error(err)\n    });\n  }\n  loadSkillLevels() {\n    this.skillMetaService.getSkillLevels().subscribe({\n      next: data => {\n        this.skillLevels = data;\n        this.skillLevelMap = {};\n        data.forEach(lvl => this.skillLevelMap[lvl.id] = lvl.name);\n      },\n      error: err => console.error(err)\n    });\n  }\n  getEmployeeName(id) {\n    return this.employeeMap[id] || 'Inconnu';\n  }\n  getSkillName(id) {\n    return this.skillMap[id] || 'Inconnu';\n  }\n  getSkillLevelName(id) {\n    return this.skillLevelMap[id] || 'Niveau inconnu';\n  }\n  onSubmit() {\n    if (!this.skillForm.valid) return;\n    const skillData = this.skillForm.value;\n    if (this.editingSkill) {\n      this.skillService.update(this.editingSkill.employee_id, this.editingSkill.skill_id, skillData).subscribe({\n        next: updated => {\n          const index = this.skills.findIndex(s => s.employee_id === updated.employee_id && s.skill_id === updated.skill_id);\n          if (index !== -1) this.skills[index] = updated;\n          this.cancelEdit();\n        },\n        error: err => this.errorMessage = err?.message || 'Erreur lors de la mise à jour'\n      });\n    } else {\n      this.skillService.create(skillData).subscribe({\n        next: newSkill => {\n          this.skills.push(newSkill);\n          this.cancelEdit();\n        },\n        error: err => this.errorMessage = err?.message || 'Erreur lors de l\\'ajout'\n      });\n    }\n  }\n  editSkill(skill) {\n    this.editingSkill = skill;\n    this.showAddForm = true;\n    this.skillForm.patchValue(skill);\n  }\n  deleteSkill(skill) {\n    if (!confirm('Voulez-vous vraiment supprimer cette compétence ?')) return;\n    this.skillService.delete(skill.employee_id, skill.skill_id).subscribe({\n      next: () => this.skills = this.skills.filter(s => !(s.employee_id === skill.employee_id && s.skill_id === skill.skill_id)),\n      error: err => this.errorMessage = err?.message || 'Erreur lors de la suppression'\n    });\n  }\n  cancelEdit() {\n    this.editingSkill = null;\n    this.showAddForm = false;\n    this.skillForm.reset();\n  }\n};\nEmployeeSkillsComponent = __decorate([Component({\n  selector: 'app-employee-skills',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './employee-skills.component.html',\n  styleUrls: ['./employee-skills.component.css']\n})], EmployeeSkillsComponent);\nexport { EmployeeSkillsComponent };","map":{"version":3,"names":["Component","Validators","CommonModule","ReactiveFormsModule","EmployeeSkillsComponent","constructor","skillService","employeeService","skillMetaService","fb","skills","employees","skillsList","skillLevels","showAddForm","editingSkill","loading","errorMessage","employeeMap","skillMap","skillLevelMap","skillForm","group","employee_id","required","skill_id","actual_skill_level_id","acquired_date","certification","last_evaluated_date","ngOnInit","loadEmployees","loadSkills","loadSkillList","loadSkillLevels","getEmployees","subscribe","next","data","forEach","emp","id","name","error","err","console","getAll","getSkills","s","getSkillLevels","lvl","getEmployeeName","getSkillName","getSkillLevelName","onSubmit","valid","skillData","value","update","updated","index","findIndex","cancelEdit","message","create","newSkill","push","editSkill","skill","patchValue","deleteSkill","confirm","delete","filter","reset","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\employee-skills\\employee-skills.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { EmployeeSkillService } from '../../services/employee-skill.service';\r\nimport { EmployeeService } from '../../services/employee.service';\r\nimport { SkillService } from '../../services/skill.service';\r\nimport type { Employee } from '../../models/employee.model';\r\nimport type { Skill } from '../../models/skill.model';\r\nimport type { SkillLevel } from '../../models/skill-level.model';\r\nimport type { EmployeeSkill } from '../../models/employee-skill.model';\r\n\r\n@Component({\r\n  selector: 'app-employee-skills',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './employee-skills.component.html',\r\n  styleUrls: ['./employee-skills.component.css']\r\n})\r\nexport class EmployeeSkillsComponent implements OnInit {\r\n  skills: EmployeeSkill[] = [];\r\n  employees: Employee[] = [];\r\n  skillsList: Skill[] = [];\r\n  skillLevels: SkillLevel[] = [];\r\n  skillForm: FormGroup;\r\n  showAddForm = false;\r\n  editingSkill: EmployeeSkill | null = null;\r\n  loading = false;\r\n  errorMessage: string | null = null;\r\n\r\n  // Dictionnaires pour accès rapide\r\n  employeeMap: Record<number, string> = {};\r\n  skillMap: Record<number, string> = {};\r\n  skillLevelMap: Record<number, string> = {};\r\n\r\n  constructor(\r\n    private skillService: EmployeeSkillService,\r\n    private employeeService: EmployeeService,\r\n    private skillMetaService: SkillService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    this.skillForm = this.fb.group({\r\n      employee_id: ['', Validators.required],\r\n      skill_id: ['', Validators.required],\r\n      actual_skill_level_id: ['', Validators.required],\r\n      acquired_date: ['', Validators.required],\r\n      certification: [''],\r\n      last_evaluated_date: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadEmployees();\r\n    this.loadSkills();\r\n    this.loadSkillList();\r\n    this.loadSkillLevels();\r\n  }\r\n\r\n  loadEmployees(): void {\r\n    this.employeeService.getEmployees().subscribe({\r\n      next: (data: Employee[]) => {\r\n        this.employees = data;\r\n        // Création du dictionnaire\r\n        this.employeeMap = {};\r\n        data.forEach(emp => this.employeeMap[emp.id!] = emp.name);\r\n      },\r\n      error: err => console.error(err)\r\n    });\r\n  }\r\n\r\n  loadSkills(): void {\r\n    this.skillService.getAll().subscribe({\r\n      next: data => this.skills = data,\r\n      error: err => console.error(err)\r\n    });\r\n  }\r\n\r\n  loadSkillList(): void {\r\n    this.skillMetaService.getSkills().subscribe({\r\n      next: data => {\r\n        this.skillsList = data;\r\n        this.skillMap = {};\r\n        data.forEach(s => this.skillMap[s.id!] = s.name);\r\n      },\r\n      error: err => console.error(err)\r\n    });\r\n  }\r\n\r\n  loadSkillLevels(): void {\r\n    this.skillMetaService.getSkillLevels().subscribe({\r\n      next: data => {\r\n        this.skillLevels = data;\r\n        this.skillLevelMap = {};\r\n        data.forEach(lvl => this.skillLevelMap[lvl.id!] = lvl.name);\r\n      },\r\n      error: err => console.error(err)\r\n    });\r\n  }\r\n\r\n  getEmployeeName(id: number): string {\r\n    return this.employeeMap[id] || 'Inconnu';\r\n  }\r\n\r\n  getSkillName(id: number): string {\r\n    return this.skillMap[id] || 'Inconnu';\r\n  }\r\n\r\n  getSkillLevelName(id: number): string {\r\n    return this.skillLevelMap[id] || 'Niveau inconnu';\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (!this.skillForm.valid) return;\r\n\r\n    const skillData: EmployeeSkill = this.skillForm.value;\r\n\r\n    if (this.editingSkill) {\r\n      this.skillService.update(this.editingSkill.employee_id, this.editingSkill.skill_id, skillData).subscribe({\r\n        next: updated => {\r\n          const index = this.skills.findIndex(s =>\r\n            s.employee_id === updated.employee_id && s.skill_id === updated.skill_id\r\n          );\r\n          if (index !== -1) this.skills[index] = updated;\r\n          this.cancelEdit();\r\n        },\r\n        error: err => this.errorMessage = err?.message || 'Erreur lors de la mise à jour'\r\n      });\r\n    } else {\r\n      this.skillService.create(skillData).subscribe({\r\n        next: newSkill => {\r\n          this.skills.push(newSkill);\r\n          this.cancelEdit();\r\n        },\r\n        error: err => this.errorMessage = err?.message || 'Erreur lors de l\\'ajout'\r\n      });\r\n    }\r\n  }\r\n\r\n  editSkill(skill: EmployeeSkill): void {\r\n    this.editingSkill = skill;\r\n    this.showAddForm = true;\r\n    this.skillForm.patchValue(skill);\r\n  }\r\n\r\n  deleteSkill(skill: EmployeeSkill): void {\r\n    if (!confirm('Voulez-vous vraiment supprimer cette compétence ?')) return;\r\n\r\n    this.skillService.delete(skill.employee_id, skill.skill_id).subscribe({\r\n      next: () => this.skills = this.skills.filter(s =>\r\n        !(s.employee_id === skill.employee_id && s.skill_id === skill.skill_id)\r\n      ),\r\n      error: err => this.errorMessage = err?.message || 'Erreur lors de la suppression'\r\n    });\r\n  }\r\n\r\n  cancelEdit(): void {\r\n    this.editingSkill = null;\r\n    this.showAddForm = false;\r\n    this.skillForm.reset();\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,mBAAmB,QAAQ,gBAAgB;AAgB7C,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAgBlCC,YACUC,YAAkC,EAClCC,eAAgC,EAChCC,gBAA8B,EAC9BC,EAAe;IAHf,KAAAH,YAAY,GAAZA,YAAY;IACZ,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAC,EAAE,GAAFA,EAAE;IAnBZ,KAAAC,MAAM,GAAoB,EAAE;IAC5B,KAAAC,SAAS,GAAe,EAAE;IAC1B,KAAAC,UAAU,GAAY,EAAE;IACxB,KAAAC,WAAW,GAAiB,EAAE;IAE9B,KAAAC,WAAW,GAAG,KAAK;IACnB,KAAAC,YAAY,GAAyB,IAAI;IACzC,KAAAC,OAAO,GAAG,KAAK;IACf,KAAAC,YAAY,GAAkB,IAAI;IAElC;IACA,KAAAC,WAAW,GAA2B,EAAE;IACxC,KAAAC,QAAQ,GAA2B,EAAE;IACrC,KAAAC,aAAa,GAA2B,EAAE;IAQxC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACZ,EAAE,CAACa,KAAK,CAAC;MAC7BC,WAAW,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACuB,QAAQ,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAExB,UAAU,CAACuB,QAAQ,CAAC;MACnCE,qBAAqB,EAAE,CAAC,EAAE,EAAEzB,UAAU,CAACuB,QAAQ,CAAC;MAChDG,aAAa,EAAE,CAAC,EAAE,EAAE1B,UAAU,CAACuB,QAAQ,CAAC;MACxCI,aAAa,EAAE,CAAC,EAAE,CAAC;MACnBC,mBAAmB,EAAE,CAAC,EAAE;KACzB,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACC,aAAa,EAAE;IACpB,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAH,aAAaA,CAAA;IACX,IAAI,CAACxB,eAAe,CAAC4B,YAAY,EAAE,CAACC,SAAS,CAAC;MAC5CC,IAAI,EAAGC,IAAgB,IAAI;QACzB,IAAI,CAAC3B,SAAS,GAAG2B,IAAI;QACrB;QACA,IAAI,CAACpB,WAAW,GAAG,EAAE;QACrBoB,IAAI,CAACC,OAAO,CAACC,GAAG,IAAI,IAAI,CAACtB,WAAW,CAACsB,GAAG,CAACC,EAAG,CAAC,GAAGD,GAAG,CAACE,IAAI,CAAC;MAC3D,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;KAChC,CAAC;EACJ;EAEAZ,UAAUA,CAAA;IACR,IAAI,CAAC1B,YAAY,CAACwC,MAAM,EAAE,CAACV,SAAS,CAAC;MACnCC,IAAI,EAAEC,IAAI,IAAI,IAAI,CAAC5B,MAAM,GAAG4B,IAAI;MAChCK,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;KAChC,CAAC;EACJ;EAEAX,aAAaA,CAAA;IACX,IAAI,CAACzB,gBAAgB,CAACuC,SAAS,EAAE,CAACX,SAAS,CAAC;MAC1CC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAAC1B,UAAU,GAAG0B,IAAI;QACtB,IAAI,CAACnB,QAAQ,GAAG,EAAE;QAClBmB,IAAI,CAACC,OAAO,CAACS,CAAC,IAAI,IAAI,CAAC7B,QAAQ,CAAC6B,CAAC,CAACP,EAAG,CAAC,GAAGO,CAAC,CAACN,IAAI,CAAC;MAClD,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;KAChC,CAAC;EACJ;EAEAV,eAAeA,CAAA;IACb,IAAI,CAAC1B,gBAAgB,CAACyC,cAAc,EAAE,CAACb,SAAS,CAAC;MAC/CC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAACzB,WAAW,GAAGyB,IAAI;QACvB,IAAI,CAAClB,aAAa,GAAG,EAAE;QACvBkB,IAAI,CAACC,OAAO,CAACW,GAAG,IAAI,IAAI,CAAC9B,aAAa,CAAC8B,GAAG,CAACT,EAAG,CAAC,GAAGS,GAAG,CAACR,IAAI,CAAC;MAC7D,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAIC,OAAO,CAACF,KAAK,CAACC,GAAG;KAChC,CAAC;EACJ;EAEAO,eAAeA,CAACV,EAAU;IACxB,OAAO,IAAI,CAACvB,WAAW,CAACuB,EAAE,CAAC,IAAI,SAAS;EAC1C;EAEAW,YAAYA,CAACX,EAAU;IACrB,OAAO,IAAI,CAACtB,QAAQ,CAACsB,EAAE,CAAC,IAAI,SAAS;EACvC;EAEAY,iBAAiBA,CAACZ,EAAU;IAC1B,OAAO,IAAI,CAACrB,aAAa,CAACqB,EAAE,CAAC,IAAI,gBAAgB;EACnD;EAEAa,QAAQA,CAAA;IACN,IAAI,CAAC,IAAI,CAACjC,SAAS,CAACkC,KAAK,EAAE;IAE3B,MAAMC,SAAS,GAAkB,IAAI,CAACnC,SAAS,CAACoC,KAAK;IAErD,IAAI,IAAI,CAAC1C,YAAY,EAAE;MACrB,IAAI,CAACT,YAAY,CAACoD,MAAM,CAAC,IAAI,CAAC3C,YAAY,CAACQ,WAAW,EAAE,IAAI,CAACR,YAAY,CAACU,QAAQ,EAAE+B,SAAS,CAAC,CAACpB,SAAS,CAAC;QACvGC,IAAI,EAAEsB,OAAO,IAAG;UACd,MAAMC,KAAK,GAAG,IAAI,CAAClD,MAAM,CAACmD,SAAS,CAACb,CAAC,IACnCA,CAAC,CAACzB,WAAW,KAAKoC,OAAO,CAACpC,WAAW,IAAIyB,CAAC,CAACvB,QAAQ,KAAKkC,OAAO,CAAClC,QAAQ,CACzE;UACD,IAAImC,KAAK,KAAK,CAAC,CAAC,EAAE,IAAI,CAAClD,MAAM,CAACkD,KAAK,CAAC,GAAGD,OAAO;UAC9C,IAAI,CAACG,UAAU,EAAE;QACnB,CAAC;QACDnB,KAAK,EAAEC,GAAG,IAAI,IAAI,CAAC3B,YAAY,GAAG2B,GAAG,EAAEmB,OAAO,IAAI;OACnD,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAACzD,YAAY,CAAC0D,MAAM,CAACR,SAAS,CAAC,CAACpB,SAAS,CAAC;QAC5CC,IAAI,EAAE4B,QAAQ,IAAG;UACf,IAAI,CAACvD,MAAM,CAACwD,IAAI,CAACD,QAAQ,CAAC;UAC1B,IAAI,CAACH,UAAU,EAAE;QACnB,CAAC;QACDnB,KAAK,EAAEC,GAAG,IAAI,IAAI,CAAC3B,YAAY,GAAG2B,GAAG,EAAEmB,OAAO,IAAI;OACnD,CAAC;IACJ;EACF;EAEAI,SAASA,CAACC,KAAoB;IAC5B,IAAI,CAACrD,YAAY,GAAGqD,KAAK;IACzB,IAAI,CAACtD,WAAW,GAAG,IAAI;IACvB,IAAI,CAACO,SAAS,CAACgD,UAAU,CAACD,KAAK,CAAC;EAClC;EAEAE,WAAWA,CAACF,KAAoB;IAC9B,IAAI,CAACG,OAAO,CAAC,mDAAmD,CAAC,EAAE;IAEnE,IAAI,CAACjE,YAAY,CAACkE,MAAM,CAACJ,KAAK,CAAC7C,WAAW,EAAE6C,KAAK,CAAC3C,QAAQ,CAAC,CAACW,SAAS,CAAC;MACpEC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC3B,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC+D,MAAM,CAACzB,CAAC,IAC5C,EAAEA,CAAC,CAACzB,WAAW,KAAK6C,KAAK,CAAC7C,WAAW,IAAIyB,CAAC,CAACvB,QAAQ,KAAK2C,KAAK,CAAC3C,QAAQ,CAAC,CACxE;MACDkB,KAAK,EAAEC,GAAG,IAAI,IAAI,CAAC3B,YAAY,GAAG2B,GAAG,EAAEmB,OAAO,IAAI;KACnD,CAAC;EACJ;EAEAD,UAAUA,CAAA;IACR,IAAI,CAAC/C,YAAY,GAAG,IAAI;IACxB,IAAI,CAACD,WAAW,GAAG,KAAK;IACxB,IAAI,CAACO,SAAS,CAACqD,KAAK,EAAE;EACxB;CACD;AA7IYtE,uBAAuB,GAAAuE,UAAA,EAPnC3E,SAAS,CAAC;EACT4E,QAAQ,EAAE,qBAAqB;EAC/BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC5E,YAAY,EAAEC,mBAAmB,CAAC;EAC5C4E,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,C,EACW5E,uBAAuB,CA6InC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}