{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nlet OrganigrammeComponent = class OrganigrammeComponent {\n  constructor(employeeService, jobDescriptionService) {\n    this.employeeService = employeeService;\n    this.jobDescriptionService = jobDescriptionService;\n    this.employees = [];\n    this.jobDescriptions = [];\n    this.orgChart = [];\n    this.loading = true;\n    this.errorMessage = null;\n  }\n  ngOnInit() {\n    this.loadData();\n  }\n  loadData() {\n    this.loading = true;\n    this.errorMessage = null;\n    Promise.all([this.employeeService.getEmployees().toPromise(), this.jobDescriptionService.getJobDescriptions().toPromise()]).then(([employees, jobDescriptions]) => {\n      this.employees = employees || [];\n      this.jobDescriptions = jobDescriptions || [];\n      this.buildOrgChart();\n      this.loading = false;\n    }).catch(err => {\n      console.error('Error loading organizational data:', err);\n      this.errorMessage = 'Erreur lors du chargement des données organisationnelles.';\n      this.loading = false;\n    });\n  }\n  buildOrgChart() {\n    // Créer une map des fiches de poste avec leurs relations hiérarchiques\n    const jobMap = new Map();\n    this.jobDescriptions.forEach(job => {\n      if (job.id) {\n        jobMap.set(job.id, job);\n      }\n    });\n    // Créer une map des employés par poste\n    const employeesByPosition = new Map();\n    this.employees.forEach(emp => {\n      const position = emp.position;\n      if (!employeesByPosition.has(position)) {\n        employeesByPosition.set(position, []);\n      }\n      employeesByPosition.get(position).push(emp);\n    });\n    // Construire l'organigramme basé sur les relations hiérarchiques des fiches de poste\n    const rootNodes = [];\n    const processedJobs = new Set();\n    // Trouver les postes de direction (sans supérieur)\n    this.jobDescriptions.forEach(job => {\n      if (job.id && !job.superieur_n1 && !processedJobs.has(job.id)) {\n        const node = this.createOrgNode(job, employeesByPosition, jobMap, processedJobs, 0);\n        if (node) {\n          rootNodes.push(node);\n        }\n      }\n    });\n    // Si aucun poste de direction n'est trouvé, créer des nœuds pour tous les postes\n    if (rootNodes.length === 0) {\n      this.jobDescriptions.forEach(job => {\n        if (job.id && !processedJobs.has(job.id)) {\n          const node = this.createOrgNode(job, employeesByPosition, jobMap, processedJobs, 0);\n          if (node) {\n            rootNodes.push(node);\n          }\n        }\n      });\n    }\n    this.orgChart = rootNodes;\n  }\n  createOrgNode(job, employeesByPosition, jobMap, processedJobs, level) {\n    if (!job.id || processedJobs.has(job.id)) {\n      return null;\n    }\n    processedJobs.add(job.id);\n    // Trouver les employés pour ce poste\n    const employeesForJob = employeesByPosition.get(job.emploi) || [];\n    // Créer un nœud pour chaque employé ou un nœud générique si aucun employé\n    if (employeesForJob.length > 0) {\n      // Prendre le premier employé comme représentant du poste\n      const mainEmployee = employeesForJob[0];\n      const node = {\n        id: job.id,\n        name: mainEmployee.name,\n        position: job.emploi,\n        email: mainEmployee.email,\n        children: [],\n        level: level\n      };\n      // Trouver les postes subordonnés\n      this.jobDescriptions.forEach(subordinateJob => {\n        if (subordinateJob.superieur_n1 === job.id || subordinateJob.superieur_n2 === job.id) {\n          const childNode = this.createOrgNode(subordinateJob, employeesByPosition, jobMap, processedJobs, level + 1);\n          if (childNode) {\n            node.children.push(childNode);\n          }\n        }\n      });\n      return node;\n    } else {\n      // Créer un nœud générique pour le poste sans employé assigné\n      const node = {\n        id: job.id,\n        name: 'Poste vacant',\n        position: job.emploi,\n        email: '',\n        children: [],\n        level: level\n      };\n      // Trouver les postes subordonnés\n      this.jobDescriptions.forEach(subordinateJob => {\n        if (subordinateJob.superieur_n1 === job.id || subordinateJob.superieur_n2 === job.id) {\n          const childNode = this.createOrgNode(subordinateJob, employeesByPosition, jobMap, processedJobs, level + 1);\n          if (childNode) {\n            node.children.push(childNode);\n          }\n        }\n      });\n      return node;\n    }\n  }\n  getNodeClass(level) {\n    const classes = ['level-0',\n    // Direction\n    'level-1',\n    // Management\n    'level-2',\n    // Superviseurs\n    'level-3',\n    // Employés\n    'level-4' // Stagiaires/Juniors\n    ];\n    return classes[Math.min(level, classes.length - 1)];\n  }\n};\nOrganigrammeComponent = __decorate([Component({\n  selector: 'app-organigramme',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './organigramme.component.html',\n  styleUrls: ['./organigramme.component.css']\n})], OrganigrammeComponent);\nexport { OrganigrammeComponent };","map":{"version":3,"names":["Component","CommonModule","OrganigrammeComponent","constructor","employeeService","jobDescriptionService","employees","jobDescriptions","orgChart","loading","errorMessage","ngOnInit","loadData","Promise","all","getEmployees","toPromise","getJobDescriptions","then","buildOrgChart","catch","err","console","error","jobMap","Map","forEach","job","id","set","employeesByPosition","emp","position","has","get","push","rootNodes","processedJobs","Set","superieur_n1","node","createOrgNode","length","level","add","employeesForJob","emploi","mainEmployee","name","email","children","subordinateJob","superieur_n2","childNode","getNodeClass","classes","Math","min","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sources":["C:\\Users\\h_ref\\Desktop\\frontend\\matchnhire\\src\\app\\pages\\organigramme\\organigramme.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmployeeService } from '../../services/employee.service';\nimport { JobDescriptionService } from '../../services/job-description.service';\nimport { Employee } from '../../models/employee.model';\nimport { JobDescription } from '../../models/job-description.model';\n\ninterface OrgNode {\n  id: number;\n  name: string;\n  position: string;\n  email: string;\n  children: OrgNode[];\n  level: number;\n}\n\n@Component({\n  selector: 'app-organigramme',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './organigramme.component.html',\n  styleUrls: ['./organigramme.component.css']\n})\nexport class OrganigrammeComponent implements OnInit {\n  employees: Employee[] = [];\n  jobDescriptions: JobDescription[] = [];\n  orgChart: OrgNode[] = [];\n  loading: boolean = true;\n  errorMessage: string | null = null;\n\n  constructor(\n    private employeeService: EmployeeService,\n    private jobDescriptionService: JobDescriptionService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadData();\n  }\n\n  loadData(): void {\n    this.loading = true;\n    this.errorMessage = null;\n\n    Promise.all([\n      this.employeeService.getEmployees().toPromise(),\n      this.jobDescriptionService.getJobDescriptions().toPromise()\n    ]).then(([employees, jobDescriptions]) => {\n      this.employees = employees || [];\n      this.jobDescriptions = jobDescriptions || [];\n      this.buildOrgChart();\n      this.loading = false;\n    }).catch(err => {\n      console.error('Error loading organizational data:', err);\n      this.errorMessage = 'Erreur lors du chargement des données organisationnelles.';\n      this.loading = false;\n    });\n  }\n\n  buildOrgChart(): void {\n    // Créer une map des fiches de poste avec leurs relations hiérarchiques\n    const jobMap = new Map<number, JobDescription>();\n    this.jobDescriptions.forEach(job => {\n      if (job.id) {\n        jobMap.set(job.id, job);\n      }\n    });\n\n    // Créer une map des employés par poste\n    const employeesByPosition = new Map<string, Employee[]>();\n    this.employees.forEach(emp => {\n      const position = emp.position;\n      if (!employeesByPosition.has(position)) {\n        employeesByPosition.set(position, []);\n      }\n      employeesByPosition.get(position)!.push(emp);\n    });\n\n    // Construire l'organigramme basé sur les relations hiérarchiques des fiches de poste\n    const rootNodes: OrgNode[] = [];\n    const processedJobs = new Set<number>();\n\n    // Trouver les postes de direction (sans supérieur)\n    this.jobDescriptions.forEach(job => {\n      if (job.id && !job.superieur_n1 && !processedJobs.has(job.id)) {\n        const node = this.createOrgNode(job, employeesByPosition, jobMap, processedJobs, 0);\n        if (node) {\n          rootNodes.push(node);\n        }\n      }\n    });\n\n    // Si aucun poste de direction n'est trouvé, créer des nœuds pour tous les postes\n    if (rootNodes.length === 0) {\n      this.jobDescriptions.forEach(job => {\n        if (job.id && !processedJobs.has(job.id)) {\n          const node = this.createOrgNode(job, employeesByPosition, jobMap, processedJobs, 0);\n          if (node) {\n            rootNodes.push(node);\n          }\n        }\n      });\n    }\n\n    this.orgChart = rootNodes;\n  }\n\n  createOrgNode(\n    job: JobDescription, \n    employeesByPosition: Map<string, Employee[]>,\n    jobMap: Map<number, JobDescription>,\n    processedJobs: Set<number>,\n    level: number\n  ): OrgNode | null {\n    if (!job.id || processedJobs.has(job.id)) {\n      return null;\n    }\n\n    processedJobs.add(job.id);\n\n    // Trouver les employés pour ce poste\n    const employeesForJob = employeesByPosition.get(job.emploi) || [];\n    \n    // Créer un nœud pour chaque employé ou un nœud générique si aucun employé\n    if (employeesForJob.length > 0) {\n      // Prendre le premier employé comme représentant du poste\n      const mainEmployee = employeesForJob[0];\n      const node: OrgNode = {\n        id: job.id,\n        name: mainEmployee.name,\n        position: job.emploi,\n        email: mainEmployee.email,\n        children: [],\n        level: level\n      };\n\n      // Trouver les postes subordonnés\n      this.jobDescriptions.forEach(subordinateJob => {\n        if (subordinateJob.superieur_n1 === job.id || subordinateJob.superieur_n2 === job.id) {\n          const childNode = this.createOrgNode(subordinateJob, employeesByPosition, jobMap, processedJobs, level + 1);\n          if (childNode) {\n            node.children.push(childNode);\n          }\n        }\n      });\n\n      return node;\n    } else {\n      // Créer un nœud générique pour le poste sans employé assigné\n      const node: OrgNode = {\n        id: job.id,\n        name: 'Poste vacant',\n        position: job.emploi,\n        email: '',\n        children: [],\n        level: level\n      };\n\n      // Trouver les postes subordonnés\n      this.jobDescriptions.forEach(subordinateJob => {\n        if (subordinateJob.superieur_n1 === job.id || subordinateJob.superieur_n2 === job.id) {\n          const childNode = this.createOrgNode(subordinateJob, employeesByPosition, jobMap, processedJobs, level + 1);\n          if (childNode) {\n            node.children.push(childNode);\n          }\n        }\n      });\n\n      return node;\n    }\n  }\n\n  getNodeClass(level: number): string {\n    const classes = [\n      'level-0', // Direction\n      'level-1', // Management\n      'level-2', // Superviseurs\n      'level-3', // Employés\n      'level-4'  // Stagiaires/Juniors\n    ];\n    return classes[Math.min(level, classes.length - 1)];\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,YAAY,QAAQ,iBAAiB;AAsBvC,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAOhCC,YACUC,eAAgC,EAChCC,qBAA4C;IAD5C,KAAAD,eAAe,GAAfA,eAAe;IACf,KAAAC,qBAAqB,GAArBA,qBAAqB;IAR/B,KAAAC,SAAS,GAAe,EAAE;IAC1B,KAAAC,eAAe,GAAqB,EAAE;IACtC,KAAAC,QAAQ,GAAc,EAAE;IACxB,KAAAC,OAAO,GAAY,IAAI;IACvB,KAAAC,YAAY,GAAkB,IAAI;EAK9B;EAEJC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACH,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,YAAY,GAAG,IAAI;IAExBG,OAAO,CAACC,GAAG,CAAC,CACV,IAAI,CAACV,eAAe,CAACW,YAAY,EAAE,CAACC,SAAS,EAAE,EAC/C,IAAI,CAACX,qBAAqB,CAACY,kBAAkB,EAAE,CAACD,SAAS,EAAE,CAC5D,CAAC,CAACE,IAAI,CAAC,CAAC,CAACZ,SAAS,EAAEC,eAAe,CAAC,KAAI;MACvC,IAAI,CAACD,SAAS,GAAGA,SAAS,IAAI,EAAE;MAChC,IAAI,CAACC,eAAe,GAAGA,eAAe,IAAI,EAAE;MAC5C,IAAI,CAACY,aAAa,EAAE;MACpB,IAAI,CAACV,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC,CAACW,KAAK,CAACC,GAAG,IAAG;MACbC,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEF,GAAG,CAAC;MACxD,IAAI,CAACX,YAAY,GAAG,2DAA2D;MAC/E,IAAI,CAACD,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC;EACJ;EAEAU,aAAaA,CAAA;IACX;IACA,MAAMK,MAAM,GAAG,IAAIC,GAAG,EAA0B;IAChD,IAAI,CAAClB,eAAe,CAACmB,OAAO,CAACC,GAAG,IAAG;MACjC,IAAIA,GAAG,CAACC,EAAE,EAAE;QACVJ,MAAM,CAACK,GAAG,CAACF,GAAG,CAACC,EAAE,EAAED,GAAG,CAAC;MACzB;IACF,CAAC,CAAC;IAEF;IACA,MAAMG,mBAAmB,GAAG,IAAIL,GAAG,EAAsB;IACzD,IAAI,CAACnB,SAAS,CAACoB,OAAO,CAACK,GAAG,IAAG;MAC3B,MAAMC,QAAQ,GAAGD,GAAG,CAACC,QAAQ;MAC7B,IAAI,CAACF,mBAAmB,CAACG,GAAG,CAACD,QAAQ,CAAC,EAAE;QACtCF,mBAAmB,CAACD,GAAG,CAACG,QAAQ,EAAE,EAAE,CAAC;MACvC;MACAF,mBAAmB,CAACI,GAAG,CAACF,QAAQ,CAAE,CAACG,IAAI,CAACJ,GAAG,CAAC;IAC9C,CAAC,CAAC;IAEF;IACA,MAAMK,SAAS,GAAc,EAAE;IAC/B,MAAMC,aAAa,GAAG,IAAIC,GAAG,EAAU;IAEvC;IACA,IAAI,CAAC/B,eAAe,CAACmB,OAAO,CAACC,GAAG,IAAG;MACjC,IAAIA,GAAG,CAACC,EAAE,IAAI,CAACD,GAAG,CAACY,YAAY,IAAI,CAACF,aAAa,CAACJ,GAAG,CAACN,GAAG,CAACC,EAAE,CAAC,EAAE;QAC7D,MAAMY,IAAI,GAAG,IAAI,CAACC,aAAa,CAACd,GAAG,EAAEG,mBAAmB,EAAEN,MAAM,EAAEa,aAAa,EAAE,CAAC,CAAC;QACnF,IAAIG,IAAI,EAAE;UACRJ,SAAS,CAACD,IAAI,CAACK,IAAI,CAAC;QACtB;MACF;IACF,CAAC,CAAC;IAEF;IACA,IAAIJ,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;MAC1B,IAAI,CAACnC,eAAe,CAACmB,OAAO,CAACC,GAAG,IAAG;QACjC,IAAIA,GAAG,CAACC,EAAE,IAAI,CAACS,aAAa,CAACJ,GAAG,CAACN,GAAG,CAACC,EAAE,CAAC,EAAE;UACxC,MAAMY,IAAI,GAAG,IAAI,CAACC,aAAa,CAACd,GAAG,EAAEG,mBAAmB,EAAEN,MAAM,EAAEa,aAAa,EAAE,CAAC,CAAC;UACnF,IAAIG,IAAI,EAAE;YACRJ,SAAS,CAACD,IAAI,CAACK,IAAI,CAAC;UACtB;QACF;MACF,CAAC,CAAC;IACJ;IAEA,IAAI,CAAChC,QAAQ,GAAG4B,SAAS;EAC3B;EAEAK,aAAaA,CACXd,GAAmB,EACnBG,mBAA4C,EAC5CN,MAAmC,EACnCa,aAA0B,EAC1BM,KAAa;IAEb,IAAI,CAAChB,GAAG,CAACC,EAAE,IAAIS,aAAa,CAACJ,GAAG,CAACN,GAAG,CAACC,EAAE,CAAC,EAAE;MACxC,OAAO,IAAI;IACb;IAEAS,aAAa,CAACO,GAAG,CAACjB,GAAG,CAACC,EAAE,CAAC;IAEzB;IACA,MAAMiB,eAAe,GAAGf,mBAAmB,CAACI,GAAG,CAACP,GAAG,CAACmB,MAAM,CAAC,IAAI,EAAE;IAEjE;IACA,IAAID,eAAe,CAACH,MAAM,GAAG,CAAC,EAAE;MAC9B;MACA,MAAMK,YAAY,GAAGF,eAAe,CAAC,CAAC,CAAC;MACvC,MAAML,IAAI,GAAY;QACpBZ,EAAE,EAAED,GAAG,CAACC,EAAE;QACVoB,IAAI,EAAED,YAAY,CAACC,IAAI;QACvBhB,QAAQ,EAAEL,GAAG,CAACmB,MAAM;QACpBG,KAAK,EAAEF,YAAY,CAACE,KAAK;QACzBC,QAAQ,EAAE,EAAE;QACZP,KAAK,EAAEA;OACR;MAED;MACA,IAAI,CAACpC,eAAe,CAACmB,OAAO,CAACyB,cAAc,IAAG;QAC5C,IAAIA,cAAc,CAACZ,YAAY,KAAKZ,GAAG,CAACC,EAAE,IAAIuB,cAAc,CAACC,YAAY,KAAKzB,GAAG,CAACC,EAAE,EAAE;UACpF,MAAMyB,SAAS,GAAG,IAAI,CAACZ,aAAa,CAACU,cAAc,EAAErB,mBAAmB,EAAEN,MAAM,EAAEa,aAAa,EAAEM,KAAK,GAAG,CAAC,CAAC;UAC3G,IAAIU,SAAS,EAAE;YACbb,IAAI,CAACU,QAAQ,CAACf,IAAI,CAACkB,SAAS,CAAC;UAC/B;QACF;MACF,CAAC,CAAC;MAEF,OAAOb,IAAI;IACb,CAAC,MAAM;MACL;MACA,MAAMA,IAAI,GAAY;QACpBZ,EAAE,EAAED,GAAG,CAACC,EAAE;QACVoB,IAAI,EAAE,cAAc;QACpBhB,QAAQ,EAAEL,GAAG,CAACmB,MAAM;QACpBG,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZP,KAAK,EAAEA;OACR;MAED;MACA,IAAI,CAACpC,eAAe,CAACmB,OAAO,CAACyB,cAAc,IAAG;QAC5C,IAAIA,cAAc,CAACZ,YAAY,KAAKZ,GAAG,CAACC,EAAE,IAAIuB,cAAc,CAACC,YAAY,KAAKzB,GAAG,CAACC,EAAE,EAAE;UACpF,MAAMyB,SAAS,GAAG,IAAI,CAACZ,aAAa,CAACU,cAAc,EAAErB,mBAAmB,EAAEN,MAAM,EAAEa,aAAa,EAAEM,KAAK,GAAG,CAAC,CAAC;UAC3G,IAAIU,SAAS,EAAE;YACbb,IAAI,CAACU,QAAQ,CAACf,IAAI,CAACkB,SAAS,CAAC;UAC/B;QACF;MACF,CAAC,CAAC;MAEF,OAAOb,IAAI;IACb;EACF;EAEAc,YAAYA,CAACX,KAAa;IACxB,MAAMY,OAAO,GAAG,CACd,SAAS;IAAE;IACX,SAAS;IAAE;IACX,SAAS;IAAE;IACX,SAAS;IAAE;IACX,SAAS,CAAE;IAAA,CACZ;IACD,OAAOA,OAAO,CAACC,IAAI,CAACC,GAAG,CAACd,KAAK,EAAEY,OAAO,CAACb,MAAM,GAAG,CAAC,CAAC,CAAC;EACrD;CACD;AA9JYxC,qBAAqB,GAAAwD,UAAA,EAPjC1D,SAAS,CAAC;EACT2D,QAAQ,EAAE,kBAAkB;EAC5BC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAAC5D,YAAY,CAAC;EACvB6D,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,C,EACW7D,qBAAqB,CA8JjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}